Index: app/src/main/java/sg/edu/np/mad/pocketchef/AdvancedSearchActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sg.edu.np.mad.pocketchef;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.MenuItem;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.Spinner;\r\n\r\nimport androidx.activity.EdgeToEdge;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.ActionBarDrawerToggle;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\n\r\nimport com.google.android.material.appbar.MaterialToolbar;\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\n\r\npublic class AdvancedSearchActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {\r\n\r\n    //Defining variables\r\n    //For menu\r\n    DrawerLayout drawerLayout;\r\n    NavigationView navigationView;\r\n    MaterialToolbar toolbar;\r\n    MenuItem nav_home, nav_recipes, nav_search, nav_logout, nav_profile, nav_favourites, nav_community, nav_pantry, nav_complex_search, nav_shoppinglist, nav_locationfinder;\r\n\r\n    //For user input\r\n    private Spinner dietSpinner;\r\n    private Spinner intolerancesSpinner;\r\n    private EditText queryEdit, excludeIngredientsEdit, minCarbsEdit, maxCarbsEdit, minProteinEdit, maxProteinEdit, minCaloriesEdit, maxCaloriesEdit;\r\n    private String query, excludeIngredients, diet, intolerances;\r\n    private Integer minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories;\r\n    private Button searchButton; //Button for user to search for recipe\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        EdgeToEdge.enable(this);\r\n        setContentView(R.layout.activity_advanced_search);\r\n\r\n        //Setting up views and listeners\r\n        setupViews();\r\n        setupListeners();\r\n    }\r\n\r\n    //Setting up views\r\n    private void setupViews() {\r\n        // Getting all the variables from xml file\r\n        dietSpinner = findViewById(R.id.diet_spinner);\r\n        intolerancesSpinner = findViewById(R.id.intolerances_spinner);\r\n        searchButton = findViewById(R.id.searchButton);\r\n\r\n        // Navigation Menu set up\r\n        drawerLayout = findViewById(R.id.drawer_layout);\r\n        navigationView = findViewById(R.id.nav_view);\r\n        toolbar = findViewById(R.id.toolbar);\r\n        nav_home = navigationView.getMenu().findItem(R.id.nav_home);\r\n        nav_recipes = navigationView.getMenu().findItem(R.id.nav_recipes);\r\n        nav_search = navigationView.getMenu().findItem(R.id.nav_search);\r\n        nav_logout = navigationView.getMenu().findItem(R.id.nav_logout);\r\n        nav_profile = navigationView.getMenu().findItem(R.id.nav_profile);\r\n        nav_favourites = navigationView.getMenu().findItem(R.id.nav_favourites);\r\n        nav_community = navigationView.getMenu().findItem(R.id.nav_community);\r\n        nav_pantry = navigationView.getMenu().findItem(R.id.nav_pantry);\r\n        nav_complex_search = navigationView.getMenu().findItem(R.id.nav_complex_search);\r\n        nav_shoppinglist = navigationView.getMenu().findItem(R.id.nav_shoppinglist);\r\n        nav_locationfinder = navigationView.getMenu().findItem(R.id.nav_locationfinder);\r\n\r\n        // Set up nav menu\r\n        navigationView.bringToFront();\r\n        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(AdvancedSearchActivity.this, drawerLayout, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);\r\n        drawerLayout.addDrawerListener(toggle);\r\n        toggle.syncState();\r\n        navigationView.setNavigationItemSelectedListener(AdvancedSearchActivity.this);\r\n        navigationView.setCheckedItem(nav_home);\r\n    }\r\n\r\n    // Setting up listeners\r\n    public void setupListeners() {\r\n        //Check if search button has been clicked\r\n        searchButton.setOnClickListener(v -> {\r\n            // Getting user inputs\r\n            queryEdit = findViewById(R.id.searchByName);\r\n            excludeIngredientsEdit = findViewById(R.id.excludeIngredients);\r\n            minCarbsEdit = findViewById(R.id.editMinCarbs);\r\n            maxCarbsEdit = findViewById(R.id.editMaxCarbs);\r\n            minProteinEdit = findViewById(R.id.editMinProtein);\r\n            maxProteinEdit = findViewById(R.id.editMaxProtein);\r\n            minCaloriesEdit = findViewById(R.id.editMinCalories);\r\n            maxCaloriesEdit = findViewById(R.id.editMaxCalories);\r\n\r\n            //Data validation to see if there are inputs, if don't have assign default values\r\n            try {\r\n                query = queryEdit.getText().toString();\r\n            } catch (Exception ex) {\r\n                query = null;\r\n            }\r\n\r\n            try {\r\n                excludeIngredients = excludeIngredientsEdit.getText().toString();\r\n            } catch (Exception ex) {\r\n                excludeIngredients = null;\r\n            }\r\n\r\n            try {\r\n                minCarbs = Integer.parseInt(minCarbsEdit.getText().toString());\r\n            } catch (Exception ex) {\r\n                minCarbs = 0;\r\n            }\r\n\r\n            try {\r\n                maxCarbs = Integer.parseInt(maxCarbsEdit.getText().toString());\r\n            } catch (Exception ex) {\r\n                maxCarbs = 2147483647;\r\n            }\r\n\r\n            try {\r\n                minProtein = Integer.parseInt(minProteinEdit.getText().toString());\r\n            } catch (Exception ex) {\r\n                minProtein = 0;\r\n            }\r\n\r\n            try {\r\n                maxProtein = Integer.parseInt(maxProteinEdit.getText().toString());\r\n            } catch (Exception ex) {\r\n                maxProtein = 2147483647;\r\n            }\r\n\r\n            try {\r\n                minCalories = Integer.parseInt(minCaloriesEdit.getText().toString());\r\n            } catch (Exception ex) {\r\n                minCalories = 0;\r\n            }\r\n\r\n            try {\r\n                maxCalories = Integer.parseInt(maxCaloriesEdit.getText().toString());\r\n            } catch (Exception ex) {\r\n                maxCalories = 2147483647;\r\n            }\r\n\r\n            try {\r\n                diet = dietSpinner.getSelectedItem().toString();\r\n                if (diet.equals(\"None\")) { //If user doesn't select anything, throw error to make diet null\r\n                    throw new Exception();\r\n                }\r\n            } catch (Exception ex) {\r\n                diet = null;\r\n            }\r\n\r\n            try {\r\n                intolerances = intolerancesSpinner.getSelectedItem().toString();\r\n                if (intolerances.equals(\"None\")) { //If user doesn't select anything, throw error to make intolerances null\r\n                    throw new Exception();\r\n                }\r\n            } catch (Exception ex) {\r\n                intolerances = null;\r\n            }\r\n\r\n            //Sending the data to Advanced Search Activity\r\n            Intent intent = new Intent(AdvancedSearchActivity.this, SearchedRecipesOutput.class);\r\n            Bundle userInput = new Bundle(); //Bundling all the userInputs after they've gone through data validation\r\n            userInput.putString(\"query\", query);\r\n            userInput.putString(\"excludeIngredients\", excludeIngredients);\r\n            userInput.putInt(\"minCarbs\", minCarbs);\r\n            userInput.putInt(\"maxCarbs\", maxCarbs);\r\n            userInput.putInt(\"minProtein\", minProtein);\r\n            userInput.putInt(\"maxProtein\", maxProtein);\r\n            userInput.putInt(\"minCalories\", minCalories);\r\n            userInput.putInt(\"maxCalories\", maxCalories);\r\n            userInput.putString(\"diet\", diet);\r\n            userInput.putString(\"intolerances\", intolerances);\r\n            intent.putExtras(userInput);\r\n            startActivity(intent);\r\n        });\r\n    }\r\n\r\n    // For the menu\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (drawerLayout.isDrawerOpen(GravityCompat.START)) {\r\n            drawerLayout.closeDrawer(GravityCompat.START);\r\n        } else {\r\n            super.onBackPressed();\r\n        }\r\n    }\r\n\r\n    //For menu\r\n    @Override\r\n    public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {\r\n        int itemId = menuItem.getItemId();\r\n        if (itemId == R.id.nav_home) {\r\n            Intent intent = new Intent(AdvancedSearchActivity.this, MainActivity.class);\r\n            finish();\r\n            startActivity(intent);\r\n        } else if (itemId == R.id.nav_recipes) {\r\n            Intent intent2 = new Intent(AdvancedSearchActivity.this, RecipeActivity.class);\r\n            finish();\r\n            startActivity(intent2);\r\n        } else if (itemId == R.id.nav_favourites) {\r\n            Intent intent3 = new Intent(AdvancedSearchActivity.this, CreateCategoryActivity.class);\r\n            finish();\r\n            startActivity(intent3);\r\n        } else if (itemId == R.id.nav_search) {\r\n            // Nothing Happens\r\n        } else if (itemId == R.id.nav_profile) {\r\n            Intent intent4 = new Intent(AdvancedSearchActivity.this, ProfileActivity.class);\r\n            finish();\r\n            startActivity(intent4);\r\n        } else if (itemId == R.id.nav_logout) {\r\n            FirebaseAuth.getInstance().signOut();\r\n            Intent intent5 = new Intent(AdvancedSearchActivity.this, LoginActivity.class);\r\n            finish();\r\n            startActivity(intent5);\r\n        } else if (itemId == R.id.nav_community) {\r\n            Intent intent6 = new Intent(AdvancedSearchActivity.this, CommunityActivity.class);\r\n            finish();\r\n            startActivity(intent6);\r\n        } else if (itemId == R.id.nav_complex_search) {\r\n            Intent intent7 = new Intent(AdvancedSearchActivity.this, AdvancedSearchActivity.class);\r\n            finish();\r\n            startActivity(intent7);\r\n        }\r\n        //        } else if (itemId = R.id.nav_shoppinglist) {\r\n//            Intent intent8 = new Intent(MainActivity.this, ShoppingListActivity.class);\r\n//            finish();\r\n//            startActivity(intent8);\r\n//        } else if (itemId = R.id.nav_locationfinder) {\r\n//            Intent intent9 = new Intent(MainActivity.this, LocationActivity.class);\r\n//            finish();\r\n//            startActivity(intent9);\r\n//        }\r\n        drawerLayout.closeDrawer(GravityCompat.START);\r\n        return true;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sg/edu/np/mad/pocketchef/AdvancedSearchActivity.java b/app/src/main/java/sg/edu/np/mad/pocketchef/AdvancedSearchActivity.java
--- a/app/src/main/java/sg/edu/np/mad/pocketchef/AdvancedSearchActivity.java	(revision f0306bc1d16c2091ca75c7870a17e167f8a3c71e)
+++ b/app/src/main/java/sg/edu/np/mad/pocketchef/AdvancedSearchActivity.java	(date 1722095337915)
@@ -223,16 +223,15 @@
             Intent intent7 = new Intent(AdvancedSearchActivity.this, AdvancedSearchActivity.class);
             finish();
             startActivity(intent7);
+        } else if (itemId == R.id.nav_shoppinglist) {
+            Intent intent8 = new Intent(AdvancedSearchActivity.this, ShopCartActivity.class);
+            finish();
+            startActivity(intent8);
+        } else if (itemId == R.id.nav_locationfinder) {
+            Intent intent9 = new Intent(AdvancedSearchActivity.this, LocationActivity.class);
+            finish();
+            startActivity(intent9);
         }
-        //        } else if (itemId = R.id.nav_shoppinglist) {
-//            Intent intent8 = new Intent(MainActivity.this, ShoppingListActivity.class);
-//            finish();
-//            startActivity(intent8);
-//        } else if (itemId = R.id.nav_locationfinder) {
-//            Intent intent9 = new Intent(MainActivity.this, LocationActivity.class);
-//            finish();
-//            startActivity(intent9);
-//        }
         drawerLayout.closeDrawer(GravityCompat.START);
         return true;
     }
Index: app/src/main/java/sg/edu/np/mad/pocketchef/AddPostActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sg.edu.np.mad.pocketchef;\r\n\r\nimport static android.content.ContentValues.TAG;\r\n\r\nimport android.content.Intent;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.provider.MediaStore;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.activity.EdgeToEdge;\r\nimport androidx.activity.result.ActivityResult;\r\nimport androidx.activity.result.ActivityResultCallback;\r\nimport androidx.activity.result.ActivityResultLauncher;\r\nimport androidx.activity.result.PickVisualMediaRequest;\r\nimport androidx.activity.result.contract.ActivityResultContracts;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.material.textfield.TextInputEditText;\r\nimport com.google.android.material.textfield.TextInputLayout;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ServerValue;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.google.firebase.messaging.FirebaseMessaging;\r\nimport com.google.firebase.storage.FirebaseStorage;\r\nimport com.google.firebase.storage.StorageReference;\r\nimport com.google.firebase.storage.UploadTask;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport sg.edu.np.mad.pocketchef.Models.Comment;\r\nimport sg.edu.np.mad.pocketchef.Models.Post;\r\n\r\n// Enjia - Stage 2\r\npublic class AddPostActivity extends AppCompatActivity {\r\n    private static final String TAG = \"AddPostActivity\";\r\n    private ActivityResultLauncher<Intent> resultLauncher;\r\n    private ImageView backButton, recipeImage, addImageIcon;\r\n    private TextView addRecipeImageText;\r\n    private LinearLayout inputLayout, instructionInputLayout, ingredientsInputLayout, equipmentInputLayout;\r\n    private TextInputEditText recipeTitleInput, proteinInput, fatInput, caloriesInput, servingsInput, prepTimeInput, costPerServingInput;\r\n    private TextInputLayout recipeTitleBox, fatInfoBox, proteinInfoBox, caloriesInfoBox, prepTimeInfoBox, costPerServingInfoBox, servingsInputBox;\r\n    private Button addMoreStepsButton, addMoreIngredients, addMoreEquipment, postButton;\r\n    private List<TextInputLayout> inputBoxes, instructionsInputBoxes  = new ArrayList<>(), ingredientsInputBoxes  = new ArrayList<>(), equipmentInputBoxes = new ArrayList<>();\r\n    private Uri imageUri;\r\n    private ProgressBar progressBar;\r\n    private String currentUsername, currentUserId, currentProfilePictureUrl;\r\n\r\n    // Database\r\n    FirebaseAuth mAuth;\r\n    FirebaseDatabase database;\r\n    DatabaseReference myRef, mUserRef;\r\n    StorageReference storageReference;\r\n    FirebaseUser currentUser;\r\n\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        EdgeToEdge.enable(this);\r\n        setContentView(R.layout.activity_add_post);\r\n\r\n        //Register user to get gallery access\r\n        registerUser();\r\n\r\n        //Setting up views and listeners\r\n        setupViews();\r\n        setupListeners();\r\n    }\r\n\r\n    private void setupViews() {\r\n        //Getting all the variables from the xml file\r\n        backButton = findViewById(R.id.backIv);\r\n\r\n        instructionInputLayout = findViewById(R.id.instruction_input_layout);\r\n        ingredientsInputLayout = findViewById(R.id.ingredients_input_layout);\r\n        equipmentInputLayout = findViewById(R.id.equipment_input_layout);\r\n        addMoreStepsButton = findViewById(R.id.addMoreSteps);\r\n        addMoreIngredients = findViewById(R.id.addMoreIngredients);\r\n        addMoreEquipment = findViewById(R.id.addEquipment);\r\n        postButton = findViewById(R.id.postRecipeButton);\r\n\r\n        recipeTitleInput = findViewById(R.id.recipeTitleInput);\r\n        recipeTitleBox = findViewById(R.id.recipeTitleBox);\r\n        proteinInput = findViewById(R.id.proteinInput);\r\n        proteinInfoBox = findViewById(R.id.proteinInfoBox);\r\n        fatInput = findViewById(R.id.fatInput);\r\n        fatInfoBox = findViewById(R.id.fatInfoBox);\r\n        caloriesInput = findViewById(R.id.caloriesInput);\r\n        caloriesInfoBox = findViewById(R.id.caloriesInfoBox);\r\n        prepTimeInput = findViewById(R.id.prepTimeInfo);\r\n        prepTimeInfoBox = findViewById(R.id.prepTimeBox);\r\n        servingsInput = findViewById(R.id.servingsInput);\r\n        servingsInputBox = findViewById(R.id.servingsInfoBox);\r\n        costPerServingInput = findViewById(R.id.costPerServingInput);\r\n        costPerServingInfoBox = findViewById(R.id.costPerServingBox);\r\n\r\n        recipeImage = findViewById(R.id.recipeImage);\r\n        addImageIcon = findViewById(R.id.addRecipeImageIcon);\r\n        addRecipeImageText = findViewById(R.id.addRecipeImageText);\r\n\r\n        progressBar = findViewById(R.id.progressBar);\r\n\r\n        // Add the initial input boxes and set up listeners for them\r\n        TextInputLayout InstructionsInputBox = (TextInputLayout) getLayoutInflater().inflate(R.layout.input_box, null);\r\n        instructionInputLayout.addView(InstructionsInputBox);\r\n        instructionsInputBoxes.add(InstructionsInputBox);\r\n        TextInputEditText instructionsEditText = InstructionsInputBox.findViewById(R.id.input);\r\n        textChangeListener(instructionsEditText);\r\n        textDelete(instructionsEditText, instructionInputLayout, instructionsInputBoxes);\r\n\r\n        TextInputLayout IngredientInputBox = (TextInputLayout) getLayoutInflater().inflate(R.layout.input_box, null);\r\n        IngredientInputBox.setHint(\"Enter Ingredient\");\r\n        ingredientsInputLayout.addView(IngredientInputBox);\r\n        ingredientsInputBoxes.add(IngredientInputBox);\r\n        TextInputEditText ingredientsEditText = IngredientInputBox.findViewById(R.id.input);\r\n        textChangeListener(ingredientsEditText);\r\n        textDelete(ingredientsEditText, ingredientsInputLayout, ingredientsInputBoxes);\r\n\r\n        TextInputLayout EquipmentInputBox = (TextInputLayout) getLayoutInflater().inflate(R.layout.input_box, null);\r\n        EquipmentInputBox.setHint(\"Enter Equipment\");\r\n        equipmentInputLayout.addView(EquipmentInputBox);\r\n        equipmentInputBoxes.add(EquipmentInputBox);\r\n        TextInputEditText equipmentEditText = EquipmentInputBox.findViewById(R.id.input);\r\n        textChangeListener(equipmentEditText);\r\n        textDelete(equipmentEditText, equipmentInputLayout, equipmentInputBoxes);\r\n\r\n        //Firebase database setup\r\n        mAuth = FirebaseAuth.getInstance();\r\n        storageReference = FirebaseStorage.getInstance().getReference().child(\"PostImages\");\r\n        database = FirebaseDatabase.getInstance(\"https://pocket-chef-cd59c-default-rtdb.asia-southeast1.firebasedatabase.app/\");\r\n        myRef = database.getReference(\"posts\").push();\r\n        // Get current user\r\n        currentUser = mAuth.getCurrentUser();\r\n        mUserRef = FirebaseDatabase.getInstance().getReference(\"users\");\r\n    }\r\n\r\n    // Setting up listeners\r\n    public void setupListeners() {\r\n        // Check if back button has been clicked\r\n        backButton.setOnClickListener(v -> {\r\n            // Go to community activity\r\n            Intent intent = new Intent(AddPostActivity.this, CommunityActivity.class);\r\n            finish();\r\n            startActivity(intent);\r\n        });\r\n\r\n        // Check if addMoreStepsButton button has been clicked\r\n        addMoreStepsButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                addInputBox(\"instructions\"); // Call add input box function if it has\r\n            }\r\n        });\r\n\r\n        // Check if addMoreIngredients button has been clicked\r\n        addMoreIngredients.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                addInputBox(\"ingredients\"); // Call add input box function if it has\r\n            }\r\n        });\r\n\r\n        // Check if addMoreEquipment button has been clicked\r\n        addMoreEquipment.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                addInputBox(\"equipment\"); // Call add input box function if it has\r\n            }\r\n        });\r\n\r\n        // Check if post button has been clicked\r\n        postButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                 if (validateData()){\r\n                     addPost();\r\n                 }\r\n            }\r\n        });\r\n\r\n        // If the user clicks on the image for the recipe, open thier gallery\r\n        recipeImage.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n               selectImageFromGallery();\r\n            }\r\n        });;\r\n\r\n        // Setting up text change listeners for the input fields\r\n        textChangeListener(recipeTitleInput);\r\n        textChangeListener(proteinInput);\r\n        textChangeListener(fatInput);\r\n        textChangeListener(caloriesInput);\r\n        textChangeListener(servingsInput);\r\n        textChangeListener(prepTimeInput);\r\n        textChangeListener(costPerServingInput);\r\n    }\r\n\r\n    // Function to add new input box\r\n    private void addInputBox(String type) {\r\n        switch(type){\r\n            case \"instructions\":\r\n                inputBoxes = instructionsInputBoxes;\r\n                inputLayout = instructionInputLayout;\r\n                break;\r\n            case \"ingredients\":\r\n                inputBoxes = ingredientsInputBoxes;\r\n                inputLayout = ingredientsInputLayout;\r\n                break;\r\n            case \"equipment\":\r\n                inputBoxes = equipmentInputBoxes;\r\n                inputLayout = equipmentInputLayout;\r\n                break;\r\n            default:\r\n                // Nothing Happens\r\n        }\r\n\r\n        boolean isValid = true;\r\n\r\n        // Check if subsequent input boxes have been filled\r\n        for (TextInputLayout inputBox : inputBoxes) {\r\n            TextInputEditText editText = inputBox.findViewById(R.id.input);\r\n            if (editText.getText().toString().trim().isEmpty()) {\r\n                inputBox.setError(\"Please fill this field\");\r\n                isValid = false;\r\n            } else {\r\n                inputBox.setError(null);\r\n                inputBox.setErrorEnabled(false);\r\n            }\r\n        }\r\n\r\n        if (isValid) {\r\n            TextInputLayout inputBox = (TextInputLayout) getLayoutInflater().inflate(R.layout.input_box, null);\r\n            inputLayout.addView(inputBox);\r\n            inputBoxes.add(inputBox);\r\n\r\n            TextInputEditText editText = inputBox.findViewById(R.id.input);\r\n            textChangeListener(editText);\r\n            textDelete(editText, inputLayout, inputBoxes);\r\n        }\r\n    }\r\n\r\n    private void textDelete(TextInputEditText editText, LinearLayout inputLayout, List<TextInputLayout> inputBoxes){ // Function to check if the input in the input box has been deleted for instructions, ingredients and equipment\r\n\r\n        editText.setOnKeyListener(new View.OnKeyListener() {\r\n            @Override\r\n            public boolean onKey(View v, int keyCode, KeyEvent event) {\r\n                if (keyCode == KeyEvent.KEYCODE_DEL) {\r\n                    if (editText.getText().toString().trim().isEmpty()) {\r\n                        if (inputBoxes.size() > 1) {\r\n                            TextInputLayout parentLayout = (TextInputLayout) editText.getParent().getParent();\r\n                            inputBoxes.remove(parentLayout);\r\n                            inputLayout.removeView(parentLayout);\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n\r\n    private void textChangeListener(TextInputEditText editText){ {\r\n      // Function to check if the input in the input box has been changed\r\n            editText.addTextChangedListener(new TextWatcher() {\r\n                @Override\r\n                public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n                }\r\n\r\n                @Override\r\n                public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                }\r\n\r\n                @Override\r\n                public void afterTextChanged(Editable s) {\r\n                    TextInputLayout parentLayout = (TextInputLayout) editText.getParent().getParent();\r\n                    if (s.toString().trim().isEmpty()) {\r\n                        parentLayout.setError(\"Please fill this field\");\r\n                    } else {\r\n                        parentLayout.setError(null);\r\n                        parentLayout.setErrorEnabled(false);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Function to allow user to select image from gallery\r\n    private void selectImageFromGallery() {\r\n        Intent intent = new Intent(MediaStore.ACTION_PICK_IMAGES);\r\n        resultLauncher.launch(intent);\r\n    }\r\n\r\n    // Register user for image\r\n    private void registerUser(){\r\n        resultLauncher = registerForActivityResult(\r\n                new ActivityResultContracts.StartActivityForResult(),\r\n                new ActivityResultCallback<ActivityResult>() {\r\n                    @Override\r\n                    public void onActivityResult(ActivityResult result) {\r\n                        try{\r\n                            // Saving image reference to a URI variable\r\n                            imageUri = result.getData().getData();\r\n                            recipeImage.setImageURI(imageUri);\r\n                            // Make the text and icon invisible\r\n                            addImageIcon.setVisibility(View.GONE);\r\n                            addRecipeImageText.setVisibility(View.GONE);\r\n                        }\r\n                        catch (Exception e){ //Throw error if the user didnt select any image\r\n                            Toast.makeText(AddPostActivity.this, \"No Image Selected\", Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    }\r\n                }\r\n        );\r\n    }\r\n\r\n    // Validate data before post is submitted\r\n    private boolean validateData() {\r\n        boolean isValid = true;\r\n\r\n        // Check if recipe title has been filled\r\n        if (recipeTitleInput.getText().toString().trim().isEmpty()) {\r\n            recipeTitleBox.setError(\"Please fill this field\");\r\n            isValid = false;\r\n        } else {\r\n            recipeTitleBox.setError(null);\r\n            recipeTitleBox.setErrorEnabled(false);\r\n        }\r\n\r\n        // Check if image has been added\r\n        if (recipeImage.getDrawable() == null) {\r\n            Toast.makeText(this, \"Please add a recipe image\", Toast.LENGTH_SHORT).show();\r\n            isValid = false;\r\n        }\r\n\r\n        // Check if protein has been filled\r\n        if (proteinInput.getText().toString().trim().isEmpty()) {\r\n            proteinInfoBox.setError(\"Please fill this field\");\r\n            isValid = false;\r\n        } else {\r\n            proteinInfoBox.setError(null);\r\n            proteinInfoBox.setErrorEnabled(false);\r\n        }\r\n\r\n        // Check if fat has been filled\r\n        if (fatInput.getText().toString().trim().isEmpty()) {\r\n            fatInfoBox.setError(\"Please fill this field\");\r\n            isValid = false;\r\n        } else {\r\n            fatInfoBox.setError(null);\r\n            fatInfoBox.setErrorEnabled(false);\r\n        }\r\n\r\n        // Check if calories has been filled\r\n        if (caloriesInput.getText().toString().trim().isEmpty()) {\r\n            caloriesInfoBox.setError(\"Please fill this field\");\r\n            isValid = false;\r\n        } else {\r\n            caloriesInfoBox.setError(null);\r\n            caloriesInfoBox.setErrorEnabled(false);\r\n        }\r\n\r\n        // Check if servings has been filled\r\n        if (servingsInput.getText().toString().trim().isEmpty()) {\r\n            servingsInputBox.setError(\"Please fill this field\");\r\n            isValid = false;\r\n        } else {\r\n            servingsInputBox.setError(null);\r\n            servingsInputBox.setErrorEnabled(false);\r\n        }\r\n\r\n        // Check if prep time has been filled\r\n        if (prepTimeInput.getText().toString().trim().isEmpty()) {\r\n            prepTimeInfoBox.setError(\"Please fill this field\");\r\n            isValid = false;\r\n        } else {\r\n            prepTimeInfoBox.setError(null);\r\n            prepTimeInfoBox.setErrorEnabled(false);\r\n        }\r\n\r\n        // Check if cost per serving has been filled\r\n        if (costPerServingInput.getText().toString().trim().isEmpty()) {\r\n            costPerServingInfoBox.setError(\"Please fill this field\");\r\n            isValid = false;\r\n        } else {\r\n            costPerServingInfoBox.setError(null);\r\n            costPerServingInfoBox.setErrorEnabled(false);\r\n        }\r\n\r\n        // Check if step-by-step instructions have been added\r\n        if (instructionsInputBoxes.get(0).getEditText().getText().toString().trim().isEmpty()) {\r\n            instructionsInputBoxes.get(0).setError(\"Please add step-by-step instructions\");\r\n            isValid = false;\r\n        } else {\r\n            instructionsInputBoxes.get(0).setError(null);\r\n            instructionsInputBoxes.get(0).setErrorEnabled(false);\r\n        }\r\n\r\n        // Check if ingredients have been added\r\n        if (ingredientsInputBoxes.get(0).getEditText().getText().toString().trim().isEmpty()) {\r\n            ingredientsInputBoxes.get(0).setError(\"Please add ingredients\");\r\n            isValid = false;\r\n        } else {\r\n            ingredientsInputBoxes.get(0).setError(null);\r\n            ingredientsInputBoxes.get(0).setErrorEnabled(false);\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    // Function to add post\r\n    private void addPost() {\r\n        // Show progress bar\r\n        progressBar.setVisibility(View.VISIBLE);\r\n\r\n        // Access firebase storage\r\n        final StorageReference imageFilePath = storageReference.child(imageUri.getLastPathSegment());\r\n        imageFilePath.putFile(imageUri).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {\r\n            @Override\r\n            public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {\r\n                imageFilePath.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {\r\n                    @Override\r\n                    public void onSuccess(Uri uri) {\r\n                        String imageDownloadLink = uri.toString();\r\n\r\n                        // Collate instructions, ingredients, and equipment into lists\r\n                        List<String> instructions = new ArrayList<>();\r\n                        for (TextInputLayout inputBox : instructionsInputBoxes) {\r\n                            TextInputEditText editText = inputBox.findViewById(R.id.input);\r\n                            String instruction = editText.getText().toString().trim();\r\n                            if (!instruction.isEmpty()) {\r\n                                instructions.add(instruction);\r\n                            }\r\n                        }\r\n\r\n                        List<String> ingredients = new ArrayList<>();\r\n                        for (TextInputLayout inputBox : ingredientsInputBoxes) {\r\n                            TextInputEditText editText = inputBox.findViewById(R.id.input);\r\n                            String ingredient = editText.getText().toString().trim();\r\n                            if (!ingredient.isEmpty()) {\r\n                                ingredients.add(ingredient);\r\n                            }\r\n                        }\r\n\r\n                        List<String> equipment = new ArrayList<>();\r\n                        for (TextInputLayout inputBox : equipmentInputBoxes) {\r\n                            TextInputEditText editText = inputBox.findViewById(R.id.input);\r\n                            String equipmentItem = editText.getText().toString().trim();\r\n                            if (!equipmentItem.isEmpty()) {\r\n                                equipment.add(equipmentItem);\r\n                            }\r\n                        }\r\n\r\n                        // Checking what the saved equipment, instructions and ingredients are\r\n                        Log.d(TAG, equipment.toString());\r\n                        Log.d(TAG, instructions.toString());\r\n                        Log.d(TAG, ingredients.toString());\r\n                        mUserRef.child(currentUser.getUid()).addValueEventListener(new ValueEventListener() {\r\n                            @Override\r\n                            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                if (snapshot.exists()) {\r\n                                    // Get username and user id of the user who made the post\r\n                                    currentUserId = currentUser.getUid();\r\n\r\n                                    // Create post object\r\n                                    Post post = new Post(\r\n                                            recipeTitleInput.getText().toString().trim(),\r\n                                            imageDownloadLink,\r\n                                            Float.parseFloat(proteinInput.getText().toString().trim()),\r\n                                            Float.parseFloat(fatInput.getText().toString().trim()),\r\n                                            Float.parseFloat(caloriesInput.getText().toString().trim()),\r\n                                            Float.parseFloat(servingsInput.getText().toString().trim()),\r\n                                            Float.parseFloat(prepTimeInput.getText().toString().trim()),\r\n                                            Float.parseFloat(costPerServingInput.getText().toString().trim()),\r\n                                            instructions,\r\n                                            ingredients,\r\n                                            equipment,\r\n                                            new ArrayList<Comment>(),\r\n                                            currentUserId\r\n                                    );\r\n\r\n                                    // Add post data to firebase database\r\n                                    myRef.setValue(post).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                                        @Override\r\n                                        public void onSuccess(Void unused) {\r\n                                            Toast.makeText(AddPostActivity.this, \"Post has been published\", Toast.LENGTH_SHORT).show();\r\n                                            NotificationHelper.showNotification(AddPostActivity.this, post.getTitle(), \"A new post by @\" + snapshot.child(\"username\").getValue(String.class) + \" has been added!\");\r\n\r\n                                        }\r\n                                    });\r\n\r\n                                    progressBar.setVisibility(View.GONE);\r\n\r\n                                    new Handler().postDelayed(new Runnable() { // Delay by 2 seconds so they can see the message\r\n                                        @Override\r\n                                        public void run() {\r\n                                            // Go to community activity and see new post\r\n                                            Intent intent = new Intent(AddPostActivity.this, CommunityActivity.class);\r\n                                            finish();\r\n                                            startActivity(intent);\r\n                                        }\r\n                                    }, 1000);\r\n                                } else {\r\n                                    Log.w(TAG, \"DataSnapshot does not exist\");\r\n                                }\r\n                            }\r\n\r\n                            @Override\r\n                            public void onCancelled(@NonNull DatabaseError error) {\r\n                                Log.e(TAG, \"DatabaseError: \" + error.getMessage()); // Handle database error\r\n                            }\r\n                        });\r\n\r\n\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sg/edu/np/mad/pocketchef/AddPostActivity.java b/app/src/main/java/sg/edu/np/mad/pocketchef/AddPostActivity.java
--- a/app/src/main/java/sg/edu/np/mad/pocketchef/AddPostActivity.java	(revision f0306bc1d16c2091ca75c7870a17e167f8a3c71e)
+++ b/app/src/main/java/sg/edu/np/mad/pocketchef/AddPostActivity.java	(date 1722095414390)
@@ -23,7 +23,6 @@
 import androidx.activity.result.ActivityResult;
 import androidx.activity.result.ActivityResultCallback;
 import androidx.activity.result.ActivityResultLauncher;
-import androidx.activity.result.PickVisualMediaRequest;
 import androidx.activity.result.contract.ActivityResultContracts;
 import androidx.annotation.NonNull;
 import androidx.appcompat.app.AppCompatActivity;
@@ -37,9 +36,7 @@
 import com.google.firebase.database.DatabaseError;
 import com.google.firebase.database.DatabaseReference;
 import com.google.firebase.database.FirebaseDatabase;
-import com.google.firebase.database.ServerValue;
 import com.google.firebase.database.ValueEventListener;
-import com.google.firebase.messaging.FirebaseMessaging;
 import com.google.firebase.storage.FirebaseStorage;
 import com.google.firebase.storage.StorageReference;
 import com.google.firebase.storage.UploadTask;
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    alias(libs.plugins.android.application)\r\n\r\n    id(\"com.google.gms.google-services\")\r\n    alias(libs.plugins.jetbrains.kotlin.android)\r\n}\r\n\r\nandroid {\r\n    namespace = \"sg.edu.np.mad.pocketchef\"\r\n    compileSdk = 34\r\n\r\n    defaultConfig {\r\n        applicationId = \"sg.edu.np.mad.pocketchef\"\r\n        minSdk = 24\r\n        targetSdk = 34\r\n        versionCode = 8\r\n        versionName = \"1.42\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            isMinifyEnabled = false\r\n            proguardFiles(\r\n                    getDefaultProguardFile(\"proguard-android-optimize.txt\"),\r\n                    \"proguard-rules.pro\"\r\n            )\r\n        }\r\n    }\r\n\r\n    buildFeatures {\r\n        viewBinding = true\r\n        mlModelBinding = true\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_1_8\r\n        targetCompatibility = JavaVersion.VERSION_1_8\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = \"17\"\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation(platform(\"com.google.firebase:firebase-bom:33.0.0\"))\r\n    implementation(\"com.google.firebase:firebase-analytics\")\r\n    implementation(\"com.google.firebase:firebase-auth\")\r\n    implementation(\"com.google.firebase:firebase-database\")\r\n    implementation(\"com.google.firebase:firebase-dynamic-links\")\r\n    implementation(\"com.google.firebase:firebase-messaging\")\r\n    implementation(\"com.google.firebase:firebase-appcheck:16.0.0\")\r\n    implementation(\"com.google.firebase:firebase-appcheck-safetynet:16.0.0\")\r\n    implementation(\"de.hdodenhof:circleimageview:3.1.0\")\r\n    implementation(\"com.squareup.retrofit2:retrofit:2.11.0\")\r\n    implementation(\"com.github.bumptech.glide:glide:4.16.0\")\r\n    implementation(\"com.google.android.material:material:1.7.0\")\r\n    implementation(\"com.squareup.retrofit2:converter-gson:2.9.0\")\r\n    implementation(\"com.squareup.picasso:picasso:2.8\")\r\n    implementation(\"io.github.glailton.expandabletextview:expandabletextview:1.0.4\")\r\n    implementation(\"org.jsoup:jsoup:1.14.3\")\r\n    implementation(\"androidx.core:core-splashscreen:1.0.0-alpha01\")\r\n    implementation(\"androidx.appcompat:appcompat:1.6.1\")\r\n    implementation(\"com.google.mlkit:image-labeling:17.0.8\")\r\n    implementation(\"org.tensorflow:tensorflow-lite:2.14.0\")\r\n    implementation (\"org.tensorflow:tensorflow-lite-gpu:2.8.0\")\r\n    implementation (\"org.tensorflow:tensorflow-lite-select-tf-ops:2.8.0\")\r\n    implementation (\"org.tensorflow:tensorflow-lite-support:0.3.1\")\r\n    implementation (\"org.tensorflow:tensorflow-lite-metadata:0.3.0\")\r\n    implementation (\"org.tensorflow:tensorflow-lite-task-text:0.2.0\")\r\n    implementation (\"com.google.code.gson:gson:2.8.8\")\r\n    implementation (\"com.google.guava:guava:31.0.1-android\")\r\n    implementation (\"androidx.constraintlayout:constraintlayout:2.1.4\")\r\n    implementation(libs.appcompat)\r\n    implementation(libs.material)\r\n    implementation(libs.activity)\r\n    implementation(libs.constraintlayout)\r\n    implementation(libs.firebase.storage)\r\n    implementation(libs.tensorflow.lite.support)\r\n    implementation(libs.tensorflow.lite.metadata)\r\n    implementation(libs.core.ktx)\r\n    testImplementation(libs.junit)\r\n    androidTestImplementation(libs.ext.junit)\r\n    androidTestImplementation(libs.espresso.core)\r\n    val dialogx_version = \"0.0.50.beta2\"\r\n    implementation(\"com.github.kongzue.DialogX:DialogX:${dialogx_version}\")\r\n    implementation(\"com.github.bumptech.glide:glide:4.16.0\")\r\n    implementation(\"androidx.room:room-runtime:2.6.1\")\r\n    annotationProcessor(\"androidx.room:room-compiler:2.6.1\")\r\n    implementation (\"com.guolindev.permissionx:permissionx:1.7.1\")\r\n    implementation(\"com.google.android.gms:play-services-location:21.0.1\")\r\n    implementation(\"com.google.android.gms:play-services-maps:18.0.0\")\r\n    implementation(\"com.google.android.libraries.places:places:3.5.0\")\r\n    implementation(\"com.google.android.gms:play-services-maps:18.0.0\")\r\n    implementation(\"com.google.maps.android:android-maps-utils:2.2.0\")\r\n    implementation (\"com.google.code.gson:gson:2.8.9\")\r\n    implementation (\"com.orhanobut:logger:2.2.0\")\r\n    implementation (\"com.google.zxing:core:3.4.1\")\r\n    implementation (\"com.journeyapps:zxing-android-embedded:4.2.0\")\r\n    implementation (\"com.squareup.retrofit2:retrofit:2.9.0\")\r\n    implementation (\"com.squareup.retrofit2:converter-gson:2.9.0\")\r\n    implementation (\"com.squareup.okhttp3:okhttp:4.9.1\")\r\n    implementation (\"com.squareup.okhttp3:logging-interceptor:4.7.2\")\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision f0306bc1d16c2091ca75c7870a17e167f8a3c71e)
+++ b/app/build.gradle.kts	(date 1722095732221)
@@ -69,23 +69,10 @@
     implementation ("org.tensorflow:tensorflow-lite-support:0.3.1")
     implementation ("org.tensorflow:tensorflow-lite-metadata:0.3.0")
     implementation ("org.tensorflow:tensorflow-lite-task-text:0.2.0")
-    implementation ("com.google.code.gson:gson:2.8.8")
     implementation ("com.google.guava:guava:31.0.1-android")
     implementation ("androidx.constraintlayout:constraintlayout:2.1.4")
-    implementation(libs.appcompat)
-    implementation(libs.material)
-    implementation(libs.activity)
-    implementation(libs.constraintlayout)
-    implementation(libs.firebase.storage)
-    implementation(libs.tensorflow.lite.support)
-    implementation(libs.tensorflow.lite.metadata)
-    implementation(libs.core.ktx)
-    testImplementation(libs.junit)
-    androidTestImplementation(libs.ext.junit)
-    androidTestImplementation(libs.espresso.core)
     val dialogx_version = "0.0.50.beta2"
     implementation("com.github.kongzue.DialogX:DialogX:${dialogx_version}")
-    implementation("com.github.bumptech.glide:glide:4.16.0")
     implementation("androidx.room:room-runtime:2.6.1")
     annotationProcessor("androidx.room:room-compiler:2.6.1")
     implementation ("com.guolindev.permissionx:permissionx:1.7.1")
@@ -98,8 +85,17 @@
     implementation ("com.orhanobut:logger:2.2.0")
     implementation ("com.google.zxing:core:3.4.1")
     implementation ("com.journeyapps:zxing-android-embedded:4.2.0")
-    implementation ("com.squareup.retrofit2:retrofit:2.9.0")
-    implementation ("com.squareup.retrofit2:converter-gson:2.9.0")
     implementation ("com.squareup.okhttp3:okhttp:4.9.1")
     implementation ("com.squareup.okhttp3:logging-interceptor:4.7.2")
+    implementation(libs.appcompat)
+    implementation(libs.material)
+    implementation(libs.activity)
+    implementation(libs.constraintlayout)
+    implementation(libs.firebase.storage)
+    implementation(libs.tensorflow.lite.support)
+    implementation(libs.tensorflow.lite.metadata)
+    implementation(libs.core.ktx)
+    testImplementation(libs.junit)
+    androidTestImplementation(libs.ext.junit)
+    androidTestImplementation(libs.espresso.core)
 }
\ No newline at end of file
Index: .idea/deploymentTargetSelector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetSelector\">\r\n    <selectionStates>\r\n      <SelectionState runConfigName=\"app\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n\r\n        <DropdownSelection timestamp=\"2024-07-25T15:30:00.829624300Z\">\r\n          <Target type=\"DEFAULT_BOOT\">\r\n            <handle>\r\n              <DeviceId pluginId=\"LocalEmulator\" identifier=\"path=C:\\Users\\enjia\\.android\\avd\\Pixel_8_Pro_API_33.avd\" />\r\n\r\n            </handle>\r\n          </Target>\r\n        </DropdownSelection>\r\n        <DialogSelection />\r\n      </SelectionState>\r\n    </selectionStates>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
--- a/.idea/deploymentTargetSelector.xml	(revision f0306bc1d16c2091ca75c7870a17e167f8a3c71e)
+++ b/.idea/deploymentTargetSelector.xml	(date 1722095611252)
@@ -4,12 +4,10 @@
     <selectionStates>
       <SelectionState runConfigName="app">
         <option name="selectionMode" value="DROPDOWN" />
-
-        <DropdownSelection timestamp="2024-07-25T15:30:00.829624300Z">
+        <DropdownSelection timestamp="2024-07-27T15:52:26.156670800Z">
           <Target type="DEFAULT_BOOT">
             <handle>
-              <DeviceId pluginId="LocalEmulator" identifier="path=C:\Users\enjia\.android\avd\Pixel_8_Pro_API_33.avd" />
-
+              <DeviceId pluginId="LocalEmulator" identifier="path=C:\Users\User\.android\avd\Pixel_8_Pro_API_VanillaIceCream_2.avd" />
             </handle>
           </Target>
         </DropdownSelection>
Index: app/src/main/java/sg/edu/np/mad/pocketchef/CommunityActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sg.edu.np.mad.pocketchef;\r\n\r\nimport static android.view.View.VISIBLE;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.text.Html;\r\nimport android.util.Log;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ImageView;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.activity.EdgeToEdge;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.ActionBarDrawerToggle;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.google.android.material.appbar.MaterialToolbar;\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.google.firebase.storage.FirebaseStorage;\r\nimport com.google.firebase.storage.StorageReference;\r\nimport com.kongzue.dialogx.dialogs.BottomMenu;\r\nimport com.kongzue.dialogx.dialogs.WaitDialog;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\nimport sg.edu.np.mad.pocketchef.Adapters.CommunityAdapter;\r\nimport sg.edu.np.mad.pocketchef.Listener.PostClickListener;\r\nimport sg.edu.np.mad.pocketchef.Listener.PostLikeClickListener;\r\nimport sg.edu.np.mad.pocketchef.Listener.PostOnHoldListener;\r\nimport sg.edu.np.mad.pocketchef.Models.Comment;\r\nimport sg.edu.np.mad.pocketchef.Models.Notification;\r\nimport sg.edu.np.mad.pocketchef.Models.Post;\r\n\r\n// Enjia - Stage 2\r\npublic class CommunityActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener{\r\n    private static final String TAG = \"CommunityActivity\";\r\n\r\n    //Menu\r\n    DrawerLayout drawerLayout;\r\n    NavigationView navigationView;\r\n    MaterialToolbar toolbar;\r\n    MenuItem nav_home, nav_recipes, nav_search, nav_logout, nav_profile, nav_favourites, nav_community, nav_pantry, nav_complex_search, nav_shoppinglist, nav_locationfinder;\r\n\r\n    // XML Variables\r\n    private ProgressBar progressBar;\r\n    private ImageView addPostButton;\r\n    private TextView noPostsFound;\r\n\r\n    private CommunityAdapter adapter;\r\n    private SearchView searchView;\r\n    private Spinner spinner;\r\n    private RecyclerView recyclerView;\r\n\r\n    // Database\r\n    FirebaseAuth mAuth;\r\n    FirebaseDatabase database;\r\n    DatabaseReference postsRef, mUserRef;\r\n    StorageReference storageReference;\r\n    FirebaseUser currentUser;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        EdgeToEdge.enable(this);\r\n        setContentView(R.layout.activity_community);\r\n\r\n        //Setting up views and listeners\r\n        setupViews();\r\n        setupListeners();\r\n    }\r\n\r\n    private void setupViews() {\r\n        // Navigation Menu set up\r\n        drawerLayout = findViewById(R.id.drawer_layout);\r\n        navigationView = findViewById(R.id.nav_view);\r\n        toolbar = findViewById(R.id.toolbar);\r\n        nav_home = navigationView.getMenu().findItem(R.id.nav_home);\r\n        nav_recipes = navigationView.getMenu().findItem(R.id.nav_recipes);\r\n        nav_search = navigationView.getMenu().findItem(R.id.nav_search);\r\n        nav_pantry = navigationView.getMenu().findItem(R.id.nav_pantry);\r\n        nav_complex_search = navigationView.getMenu().findItem(R.id.nav_complex_search);\r\n        nav_logout = navigationView.getMenu().findItem(R.id.nav_logout);\r\n        nav_profile = navigationView.getMenu().findItem(R.id.nav_profile);\r\n        nav_favourites = navigationView.getMenu().findItem(R.id.nav_favourites);\r\n        nav_community = navigationView.getMenu().findItem(R.id.nav_community);\r\n        nav_shoppinglist = navigationView.getMenu().findItem(R.id.nav_shoppinglist);\r\n        nav_locationfinder = navigationView.getMenu().findItem(R.id.nav_locationfinder);\r\n\r\n        // Set up nav menu\r\n        navigationView.bringToFront();\r\n        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(CommunityActivity.this, drawerLayout, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);\r\n        drawerLayout.addDrawerListener(toggle);\r\n        toggle.syncState();\r\n        navigationView.setNavigationItemSelectedListener(CommunityActivity.this);\r\n        navigationView.setCheckedItem(nav_home);\r\n\r\n        //Getting all the variables from the xml file\r\n        progressBar = findViewById(R.id.progressBar);\r\n        addPostButton = findViewById(R.id.addPostButton);\r\n        spinner = findViewById(R.id.sort_by_spinner);\r\n        searchView = findViewById(R.id.searchView_post);\r\n        noPostsFound = findViewById(R.id.noPostsFound);\r\n        recyclerView = findViewById(R.id.post_recycler_view);\r\n\r\n        noPostsFound.setVisibility(View.GONE); // Make sure the no posts found is hidden\r\n\r\n        //Firebase database setup\r\n        mAuth = FirebaseAuth.getInstance();\r\n        storageReference = FirebaseStorage.getInstance().getReference().child(\"PostImages\");\r\n        database = FirebaseDatabase.getInstance(\"https://pocket-chef-cd59c-default-rtdb.asia-southeast1.firebasedatabase.app/\");\r\n        postsRef = database.getReference(\"posts\");\r\n        currentUser = mAuth.getCurrentUser(); // Get current user\r\n        mUserRef = FirebaseDatabase.getInstance().getReference(\"users\");\r\n\r\n        setupSearchedRecipeRecyclerView();\r\n    }\r\n\r\n    // Setting up listeners\r\n    public void setupListeners() {\r\n        // Search function\r\n        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String query) {\r\n                if (query.isEmpty()){\r\n                    setupSearchedRecipeRecyclerView();\r\n                    return false;\r\n                }\r\n                searchPost(query);\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String newText) {\r\n                if (newText.isEmpty()){\r\n                    setupSearchedRecipeRecyclerView();\r\n                    noPostsFound.setVisibility(View.GONE); // Make sure the no posts found is shown\r\n                    return false;\r\n                }\r\n                searchPost(newText);\r\n                return true;\r\n            }\r\n        });\r\n\r\n        // Set up spinner for sorting of posts\r\n        spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                sortPosts(parent.getSelectedItem().toString());\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {\r\n            }\r\n        });\r\n\r\n        // Check if add post button has been clicked\r\n        addPostButton.setOnClickListener(v -> {\r\n            Log.d(TAG, \"Add Post\");\r\n            // Go to add post activity\r\n            Intent intent = new Intent(CommunityActivity.this, AddPostActivity.class);\r\n            finish();\r\n            startActivity(intent);\r\n        });\r\n    }\r\n\r\n    // Loading community posts\r\n    public void setupSearchedRecipeRecyclerView() {\r\n        progressBar.setVisibility(VISIBLE); // Making the progress bar visible as the posts get loaded\r\n\r\n        // Initialize the RecyclerView and Adapter\r\n        recyclerView.setLayoutManager(new LinearLayoutManager(CommunityActivity.this));\r\n        adapter = new CommunityAdapter(CommunityActivity.this, new ArrayList<>(), postClickListener, postLikeClickListener, postOnHoldListener);\r\n        recyclerView.setAdapter(adapter);\r\n\r\n        // Add a listener for data changes\r\n        postsRef.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                List<Post> posts = new ArrayList<>();\r\n                for (DataSnapshot postSnapshot : snapshot.getChildren()) {\r\n                    Post post = postSnapshot.getValue(Post.class);\r\n                    post.setPostKey(postSnapshot.getKey()); // Set the postKey for each Post object\r\n\r\n                    posts.add(post);\r\n                }\r\n\r\n                // Update the existing adapter's data\r\n                adapter.setPosts(sortPostsByNewest(posts));\r\n                adapter.notifyDataSetChanged();\r\n\r\n                // Making the progress bar disappear after posts get loaded\r\n                progressBar.setVisibility(View.GONE);\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                // Handle potential errors\r\n            }\r\n        });\r\n    }\r\n\r\n    private final PostClickListener postClickListener = postKey -> {\r\n        Log.d(TAG, postKey);\r\n        // To see recipe details\r\n        Intent postDetails = new Intent(CommunityActivity.this, PostDetailsActivity.class)\r\n                .putExtra(\"id\", postKey);\r\n        startActivity(postDetails);\r\n    };\r\n\r\n    private final PostLikeClickListener postLikeClickListener = (postKey, position) -> {\r\n        mUserRef.child(currentUser.getUid()).addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                if (snapshot.exists()) {\r\n                    String username = snapshot.child(\"username\").getValue(String.class);\r\n                    String userId = currentUser.getUid();\r\n\r\n                    // Find the post with the matching postKey\r\n                    postsRef.child(postKey).addListenerForSingleValueEvent(new ValueEventListener() {\r\n                        @Override\r\n                        public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                            Post post = snapshot.getValue(Post.class);\r\n                            post.setPostKey(snapshot.getKey());\r\n\r\n                            if (post != null && snapshot.getKey().equals(postKey)) {\r\n                                if (post.getLikesUsers().contains(userId)) {\r\n                                    post.getLikesUsers().remove(userId);\r\n                                    post.setLikes(post.getLikes() - 1);\r\n\r\n                                    // Delete the notification\r\n                                    deleteNotification(post.getUserId(), post.getPostKey() + \"_\" + userId);\r\n                                } else {\r\n                                    post.getLikesUsers().add(userId);\r\n                                    post.setLikes(post.getLikes() + 1);\r\n\r\n                                    // Send notification to the post owner\r\n                                    String title = \"Someone liked your post!\";\r\n                                    String message = \"Your post on '\" + post.getTitle() + \"' was liked by @\" + username;\r\n                                    sendNotificationToPostOwner(post.getUserId(), post.getPostKey(), title, message);\r\n                                }\r\n\r\n                                postsRef.child(postKey).setValue(post).addOnCompleteListener(task -> {\r\n                                    if (task.isSuccessful()) {\r\n                                        adapter.notifyItemChanged(position);\r\n                                    }\r\n                                });\r\n                            }\r\n\r\n                            sortPosts(spinner.getSelectedItem().toString());\r\n                        }\r\n\r\n                        @Override\r\n                        public void onCancelled(@NonNull DatabaseError error) {\r\n                            // Handle potential errors\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                Log.e(TAG, \"DatabaseError: \" + error.getMessage());\r\n            }\r\n        });\r\n    };\r\n\r\n    private final PostOnHoldListener postOnHoldListener = (postKey, position) -> {\r\n\r\n        postsRef.child(postKey).addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                Post post = snapshot.getValue(Post.class);\r\n\r\n                String currentUserId = mAuth.getCurrentUser().getUid();\r\n\r\n                // Check if the current user is the owner of the post\r\n                if (!post.getUserId().equals(currentUserId)) {\r\n                    // If the user does not own the post, do nothing\r\n                    return;\r\n                }\r\n\r\n                String[] options = {\"Edit Post\", \"Delete Post\"};\r\n\r\n                BottomMenu.show(options)\r\n                    .setMessage(Html.fromHtml(\"<b>Post Options</b>\"))\r\n                    .setOnMenuItemClickListener((dialog, text, index) -> {\r\n                        if (index == 0) {\r\n                            // Handle Edit Post\r\n                            handleEditPost(postKey);\r\n                        } else if (index == 1) {\r\n                            // Handle Delete Post\r\n                            handleDeletePost(postKey, position);\r\n                        }\r\n                        dialog.dismiss();\r\n                        return true;\r\n                    });\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                // Handle potential errors\r\n            }\r\n        });\r\n\r\n\r\n    };\r\n\r\n    // Handle notifications\r\n    private void sendNotificationToPostOwner(String postOwnerId, String id, String notificationTitle, String notificationMessage) {\r\n\r\n        DatabaseReference userRef = FirebaseDatabase.getInstance().getReference(\"users\").child(postOwnerId);\r\n        userRef.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                Log.d(TAG,  currentUser.getUid() + \"_\" + postOwnerId);\r\n                if (!currentUser.getUid().equals(postOwnerId)){ // If the post belongs to the user, ignore notifications\r\n                    long timestamp = System.currentTimeMillis(); // Get current time as timestamp\r\n\r\n                    // Get a reference to the notifications node for this user\r\n                    DatabaseReference notificationsRef = userRef.child(\"notifications\");\r\n\r\n                    // Push the new notification to the notifications list with a unique ID\r\n                    String notificationId = id + \"_\" + currentUser.getUid()\r\n                            ; // Unique ID based on post and user\r\n\r\n                    // Create a new notification object\r\n                    Notification notification = new Notification(notificationId, notificationTitle, notificationMessage, timestamp);\r\n\r\n\r\n                    notificationsRef.child(notificationId).setValue(notification)\r\n                            .addOnSuccessListener(aVoid -> Log.d(TAG, \"Notification successfully added\"))\r\n                            .addOnFailureListener(e -> Log.e(TAG, \"Error adding notification: \" + e.getMessage()));\r\n                }\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                Log.e(TAG, \"DatabaseError: \" + error.getMessage());\r\n            }\r\n        });\r\n    }\r\n\r\n    // Deleting a notification\r\n    private void deleteNotification(String postOwnerId, String notificationId) {\r\n        // Get a reference to the user's notifications node\r\n        DatabaseReference notificationsRef = FirebaseDatabase.getInstance()\r\n                .getReference(\"users\")\r\n                .child(postOwnerId)\r\n                .child(\"notifications\");\r\n\r\n        // Remove the specific notification by its ID\r\n        notificationsRef.child(notificationId).removeValue()\r\n                .addOnSuccessListener(aVoid -> Log.d(TAG, \"Notification successfully deleted\"))\r\n                .addOnFailureListener(e -> Log.e(TAG, \"Error deleting notification: \" + e.getMessage()));\r\n    }\r\n\r\n\r\n    // Function to edit post if it belongs to the user\r\n    private void handleEditPost(String postKey) {\r\n        Log.d(TAG, postKey);\r\n        // Create an intent to start the AddPostActivity\r\n        Intent intent = new Intent(CommunityActivity.this, EditPostActivity.class);\r\n        // Pass the post ID to the intent\r\n        intent.putExtra(\"postKey\", postKey);\r\n        // Finish the current activity and start the EditPostActivity\r\n        finish();\r\n        startActivity(intent);\r\n    }\r\n\r\n    // Function to delete post if it belongs to the user\r\n    private void handleDeletePost(String postKey, int position) {\r\n        // Confirm deletion with a dialog\r\n        BottomMenu.show(Collections.singletonList(\"Are you sure you want to delete this post?\"))\r\n            .setOnMenuItemClickListener((dialog, text, index) -> {\r\n                if (index == 0) { // User confirmed deletion\r\n                    WaitDialog.show(\"Deleting...\");\r\n\r\n                    // Perform the deletion in a separate thread to avoid blocking the UI\r\n                    postsRef.child(postKey).removeValue()\r\n                            .addOnCompleteListener(task -> {\r\n                                if (task.isSuccessful()) {\r\n                                    runOnUiThread(() -> {\r\n                                        adapter.removePost(position); // Custom method to remove the item from the adapter\r\n                                        adapter.notifyItemRemoved(position);\r\n                                        WaitDialog.dismiss();\r\n                                    });\r\n                                } else {\r\n                                    runOnUiThread(() -> {\r\n                                        // Handle the failure, e.g., show a Toast message\r\n                                        WaitDialog.dismiss();\r\n                                        Toast.makeText(CommunityActivity.this, \"Failed to delete post\", Toast.LENGTH_SHORT).show();\r\n                                    });\r\n                                }\r\n                            });\r\n                }\r\n                dialog.dismiss();\r\n                return true;\r\n            });\r\n    }\r\n\r\n\r\n    // Funciton to search for post\r\n    public void searchPost(String query) {\r\n        progressBar.setVisibility(VISIBLE); // Show progress bar while searching\r\n\r\n        if (query.isEmpty()){ // If user doesnt enter anything\r\n            setupSearchedRecipeRecyclerView();\r\n        }\r\n\r\n        postsRef.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                List<Post> searchedPosts = new ArrayList<>();\r\n                for (DataSnapshot postSnapshot : snapshot.getChildren()) {\r\n                    Post post = postSnapshot.getValue(Post.class);\r\n                    post.setPostKey(postSnapshot.getKey()); // Set the postKey for each Post object\r\n\r\n                    // Check if the query is present in the post's recipeName or description\r\n                    if (post.getTitle().toLowerCase().contains(query.toLowerCase())){\r\n                        searchedPosts.add(post);\r\n                    }\r\n                }\r\n\r\n                if (searchedPosts.isEmpty()){\r\n                    noPostsFound.setVisibility(View.VISIBLE); // Make sure the no posts found is shown\r\n                }\r\n                else{\r\n                    noPostsFound.setVisibility(View.GONE); // Make sure the no posts found is shown\r\n                }\r\n\r\n                // Update the RecyclerView with the search results\r\n                updateRecyclerView(searchedPosts);\r\n\r\n                // Hide progress bar after search results are loaded\r\n                progressBar.setVisibility(View.GONE);\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                // Handle potential errors\r\n                progressBar.setVisibility(View.GONE);\r\n                noPostsFound.setVisibility(View.GONE); // Make sure the no posts found is shown\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    // Function to sort posts based on chosen option\r\n    public void sortPosts(String sortOption) {\r\n        progressBar.setVisibility(View.VISIBLE); // Show progress bar while sorting\r\n\r\n        postsRef.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                List<Post> posts = new ArrayList<>();\r\n                for (DataSnapshot postSnapshot : snapshot.getChildren()) {\r\n                    Post post = postSnapshot.getValue(Post.class);\r\n                    post.setPostKey(postSnapshot.getKey()); // Set the postKey for each Post object\r\n                    posts.add(post);\r\n                }\r\n\r\n                // Sort the posts based on the selected sort option\r\n                switch (sortOption) {\r\n                    case \"My Posts\":\r\n                        posts = sortMyPosts(posts);\r\n                        break;\r\n                    case \"Newest\":\r\n                        posts = sortPostsByNewest(posts);\r\n                        break;\r\n                    case \"Oldest\":\r\n                        posts = sortPostsByOldest(posts);\r\n                        break;\r\n                    case \"Popularity (Asc)\":\r\n                        posts = sortPostsByPopularityAsc(posts);\r\n                        break;\r\n                    case \"Popularity (Desc)\":\r\n                        posts = sortPostsByPopularityDesc(posts);\r\n                        break;\r\n                }\r\n\r\n                // Update the RecyclerView with the sorted posts\r\n                updateRecyclerView(posts);\r\n\r\n                // Hide progress bar after sorting is done\r\n                progressBar.setVisibility(View.GONE);\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                // Handle potential errors\r\n                progressBar.setVisibility(View.GONE);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Sort the posts by chosen option (my posts, newest, oldest, popularity)\r\n    private List<Post> sortMyPosts(List<Post> posts) {\r\n        String userId = mAuth.getCurrentUser().getUid();\r\n        List<Post> myPosts = new ArrayList<>();\r\n        for (Post post : posts) {\r\n            if (post.getUserId().equals(userId)) {\r\n                myPosts.add(post);\r\n            }\r\n        }\r\n        return myPosts;\r\n    }\r\n\r\n    private List<Post> sortPostsByNewest(List<Post> posts) {\r\n        posts.sort((post1, post2) -> Long.compare((long) post2.getTimeStamp(), (long) post1.getTimeStamp()));\r\n        return posts;\r\n    }\r\n\r\n    private List<Post> sortPostsByOldest(List<Post> posts) {\r\n        posts.sort((post1, post2) -> Long.compare((long) post1.getTimeStamp(), (long) post2.getTimeStamp()));\r\n        return posts;\r\n    }\r\n\r\n    private List<Post> sortPostsByPopularityAsc(List<Post> posts) {\r\n        posts.sort((post1, post2) -> Integer.compare(post1.getLikes(), post2.getLikes()));\r\n        return posts;\r\n    }\r\n\r\n    private List<Post> sortPostsByPopularityDesc(List<Post> posts) {\r\n        posts.sort((post1, post2) -> Integer.compare(post2.getLikes(), post1.getLikes()));\r\n        return posts;\r\n    }\r\n\r\n    // For searching posts and sorting\r\n    private void updateRecyclerView(List<Post> posts) {\r\n        adapter.setPosts(posts); // Make sure to have a method to set new data in the adapter\r\n        adapter.notifyDataSetChanged();\r\n    }\r\n\r\n    // For the menu\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (drawerLayout.isDrawerOpen(GravityCompat.START)) {\r\n            drawerLayout.closeDrawer(GravityCompat.START);\r\n        } else {\r\n            super.onBackPressed();\r\n        }\r\n    }\r\n\r\n    //For menu\r\n    @Override\r\n    public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {\r\n        int itemId = menuItem.getItemId();\r\n        if (itemId == R.id.nav_home) {\r\n            Intent intent = new Intent(CommunityActivity.this, MainActivity.class);\r\n            finish();\r\n            startActivity(intent);\r\n        } else if (itemId == R.id.nav_recipes) {\r\n            Intent intent2 = new Intent(CommunityActivity.this, RecipeActivity.class);\r\n            finish();\r\n            startActivity(intent2);\r\n        } else if (itemId == R.id.nav_favourites) {\r\n            Intent intent3 = new Intent(CommunityActivity.this, CreateCategoryActivity.class);\r\n            finish();\r\n            startActivity(intent3);\r\n        } else if (itemId == R.id.nav_search) {\r\n            Intent intent4 = new Intent(CommunityActivity.this, AdvancedSearchActivity.class);\r\n            finish();\r\n            startActivity(intent4);\r\n        } else if (itemId == R.id.nav_profile) {\r\n            Intent intent5 = new Intent(CommunityActivity.this, ProfileActivity.class);\r\n            finish();\r\n            startActivity(intent5);\r\n        } else if (itemId == R.id.nav_logout) {\r\n            FirebaseAuth.getInstance().signOut();\r\n            Intent intent6 = new Intent(CommunityActivity.this, LoginActivity.class);\r\n            finish();\r\n            startActivity(intent6);\r\n        } else if (itemId == R.id.nav_community) {\r\n            // Nothing Happens\r\n        } else if (itemId == R.id.nav_complex_search) {\r\n            Intent intent7 = new Intent(CommunityActivity.this, ComplexSearchActivity.class);\r\n            finish();\r\n            startActivity(intent7);\r\n        }\r\n        //        } else if (itemId = R.id.nav_shoppinglist) {\r\n//            Intent intent8 = new Intent(MainActivity.this, ShoppingListActivity.class);\r\n//            finish();\r\n//            startActivity(intent8);\r\n//        } else if (itemId = R.id.nav_locationfinder) {\r\n//            Intent intent9 = new Intent(MainActivity.this, LocationActivity.class);\r\n//            finish();\r\n//            startActivity(intent9);\r\n//        }\r\n        drawerLayout.closeDrawer(GravityCompat.START);\r\n        return true;\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sg/edu/np/mad/pocketchef/CommunityActivity.java b/app/src/main/java/sg/edu/np/mad/pocketchef/CommunityActivity.java
--- a/app/src/main/java/sg/edu/np/mad/pocketchef/CommunityActivity.java	(revision f0306bc1d16c2091ca75c7870a17e167f8a3c71e)
+++ b/app/src/main/java/sg/edu/np/mad/pocketchef/CommunityActivity.java	(date 1722095401658)
@@ -594,16 +594,15 @@
             Intent intent7 = new Intent(CommunityActivity.this, ComplexSearchActivity.class);
             finish();
             startActivity(intent7);
+                } else if (itemId == R.id.nav_shoppinglist) {
+            Intent intent8 = new Intent(CommunityActivity.this, ShopCartActivity.class);
+            finish();
+            startActivity(intent8);
+        } else if (itemId == R.id.nav_locationfinder) {
+            Intent intent9 = new Intent(CommunityActivity.this, LocationActivity.class);
+            finish();
+            startActivity(intent9);
         }
-        //        } else if (itemId = R.id.nav_shoppinglist) {
-//            Intent intent8 = new Intent(MainActivity.this, ShoppingListActivity.class);
-//            finish();
-//            startActivity(intent8);
-//        } else if (itemId = R.id.nav_locationfinder) {
-//            Intent intent9 = new Intent(MainActivity.this, LocationActivity.class);
-//            finish();
-//            startActivity(intent9);
-//        }
         drawerLayout.closeDrawer(GravityCompat.START);
         return true;
     }
Index: app/src/main/java/sg/edu/np/mad/pocketchef/ComplexSearchActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\npackage sg.edu.np.mad.pocketchef;\r\n\r\nimport android.app.AlertDialog;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.Manifest;\r\n\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.provider.MediaStore;\r\nimport android.speech.RecognizerIntent;\r\nimport android.util.Log;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.activity.result.ActivityResultLauncher;\r\nimport androidx.activity.result.contract.ActivityResultContracts;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.ActionBarDrawerToggle;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\n\r\nimport com.google.android.material.appbar.MaterialToolbar;\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.android.material.snackbar.Snackbar;\r\nimport com.google.android.material.textview.MaterialTextView;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\n\r\nimport org.tensorflow.lite.Interpreter;\r\nimport org.tensorflow.lite.support.common.FileUtil;\r\nimport org.tensorflow.lite.support.image.TensorImage;\r\nimport org.tensorflow.lite.support.image.ops.ResizeOp;\r\nimport org.tensorflow.lite.support.tensorbuffer.TensorBuffer;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.nio.MappedByteBuffer;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\n\r\npublic class ComplexSearchActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {\r\n\r\n    private static final String TAG = \"ComplexSearchActivity\";\r\n    private static final int REQUEST_CODE_PERMISSIONS = 101;\r\n    private static final int PERMISSION_NONE = 0;\r\n    private static final int PERMISSION_CAMERA = 1;\r\n    private static final int PERMISSION_GALLERY = 2;\r\n    private static final int PERMISSION_MICROPHONE = 3;\r\n    private int permissionRequested = PERMISSION_NONE;\r\n    private DrawerLayout drawerLayout;\r\n    private ImageView imageView_classify;\r\n    private MaterialTextView resultTextView;\r\n    private Interpreter tflite;\r\n    private List<String> labels;\r\n    private ExecutorService executorService;\r\n    private boolean isClassifiedLabelUpdated = false;\r\n    private boolean isRecognizedTextUpdated = false;\r\n    private String classifiedLabel;\r\n    private Set<String> foodKeywords;\r\n\r\n    CardView cardView_open_camera, cardView_open_gallery, cardView_start_recognition, cardView_search_recipes;\r\n    FrameLayout frameLayout_image_camera, frameLayout_image_gallery, frameLayout_image_voice, frameLayout_image_recipes;\r\n    NavigationView navigationView;\r\n    MaterialToolbar toolbar;\r\n    MenuItem nav_home, nav_recipes, nav_search, nav_logout, nav_profile, nav_favourites, nav_community, nav_pantry, nav_complex_search, nav_shoppinglist, nav_locationfinder;\r\n\r\n    // Launcher for camera activity to capture images, for user to take a photo\r\n    private final ActivityResultLauncher<Intent> cameraLauncher = registerForActivityResult(\r\n            // Specify contract for strating activity, expects a result\r\n            new ActivityResultContracts.StartActivityForResult(),\r\n            result -> {\r\n                // Check if result is ok and data is not null\r\n                if (result.getResultCode() == RESULT_OK && result.getData() != null) {\r\n                    // Retrieve captured image as a bitmap from extras\r\n                    Bundle extras = result.getData().getExtras();\r\n                    assert extras != null;\r\n                    Bitmap imageBitmap = (Bitmap) extras.get(\"data\");\r\n                    if (imageBitmap != null) {\r\n                        // Resize the Bitmap to the desired size (224x224)\r\n                        Bitmap resizedBitmap = resizeBitmap(imageBitmap);\r\n                        // Set the resized Bitmap to the ImageView\r\n                        imageView_classify.setImageBitmap(resizedBitmap);\r\n                        // Classify the image using TFLite model\r\n                        classifyImage(resizedBitmap);\r\n                    }\r\n                }\r\n            }\r\n    );\r\n    // Launcher for gallery activity, for user to pick an image from gallery\r\n    private final ActivityResultLauncher<Intent> galleryLauncher = registerForActivityResult(\r\n            // Check if the result is ok and the data is not null\r\n            new ActivityResultContracts.StartActivityForResult(),\r\n            result -> {\r\n                if (result.getResultCode() == RESULT_OK && result.getData() != null) {\r\n                    // Get the URI of selected image from the result data\r\n                    Uri selectedImageUri = result.getData().getData();\r\n                    if (selectedImageUri != null) {\r\n                        try (InputStream inputStream = getContentResolver().openInputStream(selectedImageUri)) {\r\n                            // Decode the image from the input stream to a Bitmap\r\n                            Bitmap imageBitmap = BitmapFactory.decodeStream(inputStream);\r\n                            // Resize the Bitmap to the desired size (224x224)\r\n                            Bitmap resizedBitmap = resizeBitmap(imageBitmap);\r\n                            // Set the resized Bitmap to the ImageView\r\n                            imageView_classify.setImageBitmap(resizedBitmap);\r\n                            // Classify the image using TFLite model\r\n                            classifyImage(resizedBitmap);\r\n                        } catch (IOException e) {\r\n                            Log.e(TAG, \"Error loading image from gallery\", e);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n    );\r\n    // Launcher for speech recognition activity, for user to speak and recognize text\r\n    private final ActivityResultLauncher<Intent> speechRecognitionLauncher = registerForActivityResult(\r\n            new ActivityResultContracts.StartActivityForResult(),\r\n            result -> {\r\n                // Check if result is ok and data is not null\r\n                if (result.getResultCode() == RESULT_OK && result.getData() != null) {\r\n                    // Get the list of recognised words from the result data\r\n                    ArrayList<String> results = result.getData().getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);\r\n                    if (results != null && !results.isEmpty()) {\r\n                        // Display the first recognised word\r\n                        String recognizedText = results.get(0);\r\n                        // Display the recognized text in the TextView\r\n                        resultTextView.setText(recognizedText);\r\n                        // Filter the recognized text based on food keywords\r\n                        filterFoodRelatedWords(recognizedText);\r\n                    }\r\n                }\r\n            }\r\n    );\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_complex_search);\r\n\r\n        // Initialize views\r\n        imageView_classify = findViewById(R.id.imageView);\r\n        resultTextView = findViewById(R.id.resultTextView);\r\n\r\n        // Intialise drawable menu\r\n        drawerLayout = findViewById(R.id.drawer_layout);\r\n        navigationView = findViewById(R.id.nav_view);\r\n        toolbar = findViewById(R.id.toolbar);\r\n        nav_home = navigationView.getMenu().findItem(R.id.nav_home);\r\n        nav_recipes = navigationView.getMenu().findItem(R.id.nav_recipes);\r\n        nav_search = navigationView.getMenu().findItem(R.id.nav_search);\r\n        nav_logout = navigationView.getMenu().findItem(R.id.nav_logout);\r\n        nav_profile = navigationView.getMenu().findItem(R.id.nav_profile);\r\n        nav_favourites = navigationView.getMenu().findItem(R.id.nav_favourites);\r\n        nav_pantry = navigationView.getMenu().findItem(R.id.nav_pantry);\r\n        nav_community = navigationView.getMenu().findItem(R.id.nav_community);\r\n        nav_complex_search = navigationView.getMenu().findItem(R.id.nav_complex_search);\r\n        nav_shoppinglist = navigationView.getMenu().findItem(R.id.nav_shoppinglist);\r\n        nav_locationfinder = navigationView.getMenu().findItem(R.id.nav_locationfinder);\r\n\r\n        // Intialise cardViews\r\n        cardView_open_camera = findViewById(R.id.cardView_open_camera);\r\n        cardView_open_gallery = findViewById(R.id.cardView_open_gallery);\r\n        cardView_start_recognition = findViewById(R.id.cardView_start_recognition);\r\n        cardView_search_recipes = findViewById(R.id.cardView_search_recipes);\r\n\r\n        // Intialise frameLayout\r\n        frameLayout_image_camera = findViewById(R.id.frameLayout_image_camera);\r\n        frameLayout_image_gallery = findViewById(R.id.frameLayout_image_gallery);\r\n        frameLayout_image_voice = findViewById(R.id.frameLayout_image_voice);\r\n        frameLayout_image_recipes = findViewById(R.id.frameLayout_image_recipes);\r\n\r\n        // Create executor service for background tasks\r\n        executorService = Executors.newFixedThreadPool(2);\r\n\r\n        // Load the TFLite model and labels in background\r\n        loadModelAndLabels();\r\n\r\n        // Load food keywords\r\n        foodKeywords = loadFoodKeywords();\r\n\r\n        // onClickListener for open camera function\r\n        cardView_open_camera.setOnClickListener(view -> {\r\n            if (isEmulator()) {\r\n                // Use a predefined image for testing on emulator for testing\r\n                Bitmap imageBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.test4);\r\n                Bitmap resizedBitmap = resizeBitmap(imageBitmap);\r\n                imageView_classify.setImageBitmap(resizedBitmap);\r\n                classifyImage(resizedBitmap);\r\n            } else {\r\n                if (checkAndRequestCameraPermissions()) {\r\n                    openCamera();\r\n                }\r\n            }\r\n        });\r\n\r\n        // onClickListener for open gallery function\r\n        cardView_open_gallery.setOnClickListener(view -> {\r\n            if (checkAndRequestGalleryPermissions()) {\r\n                openGallery();\r\n            }\r\n        });\r\n\r\n        // onClickListener for start voice recognition function\r\n        cardView_start_recognition.setOnClickListener(view -> {\r\n            if (checkAndRequestVoicePermissions()) {\r\n                startSpeechRecognition();\r\n            }\r\n        });\r\n\r\n        // onClickListener for search recipes function\r\n        cardView_search_recipes.setOnClickListener(v -> navigateToSearchedQueryRecipes());\r\n\r\n        // Set up navigation view\r\n        navigationView.bringToFront();\r\n        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawerLayout, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);\r\n        drawerLayout.addDrawerListener(toggle);\r\n        toggle.syncState();\r\n        navigationView.setNavigationItemSelectedListener(ComplexSearchActivity.this);\r\n        navigationView.setCheckedItem(nav_home);\r\n    }\r\n\r\n    // Function to check for camera permissions, prompts if required\r\n    private boolean checkAndRequestCameraPermissions() {\r\n        List<String> listPermissionsNeeded = new ArrayList<>();\r\n        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {\r\n            listPermissionsNeeded.add(Manifest.permission.CAMERA);\r\n        }\r\n\r\n        if (!listPermissionsNeeded.isEmpty()) {\r\n            permissionRequested = PERMISSION_CAMERA;\r\n            ActivityCompat.requestPermissions(this, listPermissionsNeeded.toArray(new String[0]), REQUEST_CODE_PERMISSIONS);\r\n            return false; // Permissions requested\r\n        }\r\n        return true; // Permissions already granted\r\n    }\r\n\r\n    // Function to check for gallery permissions, prompts if required\r\n    private boolean checkAndRequestGalleryPermissions() {\r\n        List<String> listPermissionsNeeded = new ArrayList<>();\r\n        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_MEDIA_IMAGES) != PackageManager.PERMISSION_GRANTED) {\r\n            listPermissionsNeeded.add(Manifest.permission.READ_MEDIA_IMAGES);\r\n        }\r\n\r\n        if (!listPermissionsNeeded.isEmpty()) {\r\n            permissionRequested = PERMISSION_GALLERY;\r\n            ActivityCompat.requestPermissions(this, listPermissionsNeeded.toArray(new String[0]), REQUEST_CODE_PERMISSIONS);\r\n            return false; // Permissions requested\r\n        }\r\n        return true; // Permissions already granted\r\n    }\r\n\r\n    // Function to check for voice permissions, prompts if required\r\n    private boolean checkAndRequestVoicePermissions() {\r\n        List<String> listPermissionsNeeded = new ArrayList<>();\r\n        if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED) {\r\n            listPermissionsNeeded.add(Manifest.permission.RECORD_AUDIO);\r\n        }\r\n\r\n        if (!listPermissionsNeeded.isEmpty()) {\r\n            permissionRequested = PERMISSION_MICROPHONE;\r\n            ActivityCompat.requestPermissions(this, listPermissionsNeeded.toArray(new String[0]), REQUEST_CODE_PERMISSIONS);\r\n            return false; // Permissions requested\r\n        }\r\n        return true; // Permissions already granted\r\n    }\r\n\r\n    // Function to open camera intent\r\n    private void openCamera() {\r\n        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n        if (takePictureIntent.resolveActivity(getPackageManager()) != null) {\r\n            cameraLauncher.launch(takePictureIntent);\r\n        }\r\n    }\r\n\r\n    // Function to open gallery intent\r\n    private void openGallery() {\r\n        Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\r\n        intent.setType(\"image/*\");\r\n        galleryLauncher.launch(intent);\r\n    }\r\n\r\n    // Function to start speech recognition\r\n    private void startSpeechRecognition() {\r\n        Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);\r\n        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);\r\n        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault());\r\n\r\n        if (intent.resolveActivity(getPackageManager()) != null) {\r\n            speechRecognitionLauncher.launch(intent);\r\n        }\r\n    }\r\n\r\n    // Function to handle permissions result\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        if (requestCode == REQUEST_CODE_PERMISSIONS) {\r\n            Map<String, Integer> perms = new HashMap<>();\r\n            perms.put(Manifest.permission.CAMERA, PackageManager.PERMISSION_GRANTED);\r\n            perms.put(Manifest.permission.READ_MEDIA_IMAGES, PackageManager.PERMISSION_GRANTED);\r\n            perms.put(Manifest.permission.RECORD_AUDIO, PackageManager.PERMISSION_GRANTED);\r\n\r\n            for (int i = 0; i < permissions.length; i++) {\r\n                perms.put(permissions[i], grantResults[i]);\r\n            }\r\n\r\n            boolean allPermissionsGranted = true;\r\n            for (int value : perms.values()) {\r\n                if (value != PackageManager.PERMISSION_GRANTED) {\r\n                    allPermissionsGranted = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!allPermissionsGranted) {\r\n                Log.e(TAG, \"Some permissions are not granted!\");\r\n            } else {\r\n                Log.d(TAG, \"All permissions granted\");\r\n                // Open the respective feature based on the permission requested\r\n                switch (permissionRequested) {\r\n                    case PERMISSION_CAMERA:\r\n                        openCamera();\r\n                        break;\r\n                    case PERMISSION_GALLERY:\r\n                        openGallery();\r\n                        break;\r\n                    case PERMISSION_MICROPHONE:\r\n                        startSpeechRecognition();\r\n                        break;\r\n                }\r\n                permissionRequested = PERMISSION_NONE;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Function to filter food related words\r\n    private void filterFoodRelatedWords(String recognizedText) {\r\n        // Split the recognized text into words\r\n        String[] words = recognizedText.split(\"\\\\s+\");\r\n        // Create a list to store filtered words\r\n        List<String> filteredWords = new ArrayList<>();\r\n        // Iterate through each word in the list\r\n        for (String word : words) {\r\n            // Check if the word contains any of the food keywords\r\n            if (foodKeywords.contains(word.toLowerCase())) {\r\n                // Add the word to the filtered list\r\n                filteredWords.add(word);\r\n            }\r\n        }\r\n        // Join the filtered words back into a single string\r\n        String filteredResult = String.join(\" \", filteredWords);\r\n        // Update the TextView with the filtered result\r\n        updateUIWithFilteredResult(filteredResult);\r\n    }\r\n\r\n    // Function to update UI with filtered result\r\n    private void updateUIWithFilteredResult(String filteredResult) {\r\n        runOnUiThread(() -> {\r\n            String displayMessage = filteredResult;\r\n            if (displayMessage == null || displayMessage.trim().isEmpty()) {\r\n                displayMessage = \"Please try another image or voice search\";\r\n            } else {\r\n                isRecognizedTextUpdated = true;\r\n            }\r\n            resultTextView.setText(displayMessage);\r\n            resultTextView.setVisibility(View.VISIBLE);\r\n        });\r\n    }\r\n\r\n    // Function to load TFLite model and labels\r\n    private void loadModelAndLabels() {\r\n        // Execute the loading process in a background thread\r\n        executorService.execute(() -> {\r\n            try {\r\n                // Load TFLite model from assets folder\r\n                MappedByteBuffer tfliteModel = FileUtil.loadMappedFile(ComplexSearchActivity.this, \"food101_mobilenet_quant.tflite\");\r\n                // Intialise the TFLite interpreter with the loaded model\r\n                tflite = new Interpreter(tfliteModel);\r\n                // Load labels from assets folder\r\n                labels = FileUtil.loadLabels(ComplexSearchActivity.this, \"labels.txt\");\r\n            } catch (IOException e) {\r\n                // Log error if issue loading model or labels\r\n                Log.e(TAG, \"Error loading TFLite model or labels\", e);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Function to classify image using TFLite model\r\n    private void classifyImage(Bitmap bitmap) {\r\n        // Execute the classification process in a background thread\r\n        executorService.execute(() -> {\r\n            String resultMessage;\r\n            boolean showSnackbar = false;\r\n            try {\r\n                // Load the bitmap into a TensorImage object\r\n                TensorImage tensorImage = new TensorImage();\r\n                tensorImage.load(bitmap);\r\n                // Resize the image to the expected input size of the model (224, 224)\r\n                tensorImage = new ResizeOp(224, 224, ResizeOp.ResizeMethod.BILINEAR).apply(tensorImage);\r\n                // Create output buffer to hold model prediction from classification result\r\n                TensorBuffer outputBuffer = TensorBuffer.createFixedSize(new int[]{1, 101}, tensorImage.getDataType());\r\n                // Run model with input image, store result in output buffer\r\n                tflite.run(tensorImage.getBuffer().rewind(), outputBuffer.getBuffer().rewind());\r\n                // Extract float array from output buffer\r\n                float[] outputArray = outputBuffer.getFloatArray();\r\n                // Get the index of the highest confidence in the output array (class with highest probability)\r\n                int maxIndex = getMaxIndex(outputArray);\r\n                // Map the index to the corresponding label\r\n                classifiedLabel = labels.get(maxIndex);\r\n                // Clean the classified label\r\n                classifiedLabel = classifiedLabel.replace(\"_\", \" \");\r\n                // Get the confidence value from the output array\r\n                float confidenceValue = outputArray[maxIndex];\r\n                // Convert confidence value to percentage, max confidence value is 255\r\n                float confidenceLevel = (confidenceValue / 255) * 100;\r\n                // Check if confidence value is less than 5%\r\n                if (confidenceLevel < 5) {\r\n                    resultMessage = \"TensorFlow model unable to classify image\";\r\n                    showSnackbar = true;\r\n                } else {\r\n                    // Format the result message\r\n                    resultMessage = String.format(\"This is probably a %s : %.2f%% confidence level\", classifiedLabel, confidenceLevel);\r\n                }\r\n            } catch (Exception e) {\r\n                // Log error if issue classifying image\r\n                Log.e(TAG, \"Error during image classification\", e);\r\n                resultMessage = \"Error classifying image\";\r\n                showSnackbar = true;\r\n            }\r\n            // Update UI with the classification result\r\n            updateUIWithClassificationResult(resultMessage, showSnackbar);\r\n        });\r\n    }\r\n\r\n    // Function to update UI with classification result\r\n    private void updateUIWithClassificationResult(String resultMessage, boolean showSnackbar) {\r\n        runOnUiThread(() -> {\r\n            String displayMessage = resultMessage;\r\n            if (displayMessage == null || displayMessage.trim().isEmpty()) {\r\n                displayMessage = \"Error classifying image\";\r\n            }\r\n            if (showSnackbar) {\r\n                Snackbar.make(resultTextView, \"Please try image classification again\", Snackbar.LENGTH_LONG).show();\r\n            } else {\r\n                isClassifiedLabelUpdated = true;\r\n            }\r\n            resultTextView.setText(displayMessage);\r\n            resultTextView.setVisibility(View.VISIBLE);\r\n        });\r\n    }\r\n\r\n    // Function to get the index of the highest confidence in the output array\r\n    private int getMaxIndex(float[] array) {\r\n        int maxIndex = -1;\r\n        float maxValue = Float.MIN_VALUE;\r\n        for (int i = 0; i < array.length; i++) {\r\n            if (array[i] > maxValue) {\r\n                maxValue = array[i];\r\n                maxIndex = i;\r\n            }\r\n        }\r\n        return maxIndex;\r\n    }\r\n\r\n    // Function to check if the device is running on an emulator, streamlines testing due to no web camera\r\n    private boolean isEmulator() {\r\n        return android.os.Build.MODEL.contains(\"sdk\") || android.os.Build.MODEL.contains(\"Emulator\");\r\n    }\r\n\r\n    // Function to resize bitmap to 224x224\r\n    private Bitmap resizeBitmap(Bitmap bitmap) {\r\n        return Bitmap.createScaledBitmap(bitmap, 224, 224, true);\r\n    }\r\n\r\n    // Function to load food keywords from raw resource\r\n    private Set<String> loadFoodKeywords() {\r\n        // Initialize an empty set to store keywords\r\n        Set<String> keywords = new HashSet<>();\r\n\r\n        try {\r\n            // Open the raw resource file for reading\r\n            InputStream inputStream = getResources().openRawResource(R.raw.ingredient_to_index);\r\n            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));\r\n\r\n            // Read each line from the file\r\n            String line;\r\n            while ((line = reader.readLine()) != null) {\r\n                // Split each line by \":\" and add the first part (before \":\") to the set of keywords\r\n                String[] parts = line.split(\":\");\r\n                if (parts.length > 0) {\r\n                    keywords.add(parts[0].trim());\r\n                }\r\n            }\r\n\r\n            // Close the reader and input stream\r\n            reader.close();\r\n            inputStream.close();\r\n\r\n        } catch (IOException e) {\r\n            // Log the error if there's an issue loading the keywords\r\n            Log.e(\"VoiceSearchActivity\", \"Error loading food keywords\", e);\r\n        }\r\n\r\n        // Return the set of loaded keywords\r\n        return keywords;\r\n    }\r\n\r\n    private void navigateToSearchedQueryRecipes() {\r\n        String searchQuery = null;\r\n        if (isClassifiedLabelUpdated) {\r\n            // Classified label was updated last\r\n            searchQuery = classifiedLabel;\r\n        } else if (isRecognizedTextUpdated) {\r\n            // Recognized text was updated last\r\n            searchQuery = resultTextView.getText().toString();\r\n        }\r\n\r\n        if (searchQuery == null || searchQuery.trim().isEmpty()) {\r\n            // Show dialog to notify user\r\n            showNotificationDialog();\r\n        } else {\r\n            // Proceed to start activity with the search query\r\n            startSearchedQueryRecipesActivity(searchQuery);\r\n        }\r\n    }\r\n\r\n    private void showNotificationDialog() {\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\r\n        builder.setTitle(\"Input Required\");\r\n        builder.setMessage(\"To search for recipes, please provide a search query.\");\r\n\r\n        // Set up the button\r\n        builder.setPositiveButton(\"OK\", (dialog, which) -> {\r\n            // Handle OK button click (optional)\r\n            dialog.dismiss(); // Dismiss the dialog\r\n        });\r\n\r\n        // Create and show the dialog\r\n        AlertDialog dialog = builder.create();\r\n        dialog.show();\r\n    }\r\n\r\n    private void startSearchedQueryRecipesActivity(String searchQuery) {\r\n        Intent intent = new Intent(ComplexSearchActivity.this, SearchedQueryRecipesOutput.class);\r\n        intent.putExtra(\"SEARCH_QUERY\", searchQuery);\r\n        startActivity(intent);\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        if (tflite != null) {\r\n            tflite.close();\r\n        }\r\n        if (executorService != null) {\r\n            executorService.shutdown();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {\r\n        int itemId = menuItem.getItemId();\r\n        if (itemId == R.id.nav_home) {\r\n            // Nothing Happens\r\n        } else if (itemId == R.id.nav_recipes) {\r\n            Intent intent = new Intent(ComplexSearchActivity.this, RecipeActivity.class);\r\n            finish();\r\n            startActivity(intent);\r\n        } else if (itemId == R.id.nav_profile) {\r\n            Intent intent2 = new Intent(ComplexSearchActivity.this, ProfileActivity.class);\r\n            finish();\r\n            startActivity(intent2);\r\n        } else if (itemId == R.id.nav_favourites) {\r\n            Intent intent3 = new Intent(ComplexSearchActivity.this, CreateCategoryActivity.class);\r\n            finish();\r\n            startActivity(intent3);\r\n        } else if (itemId == R.id.nav_pantry) {\r\n            Intent intent3 = new Intent(ComplexSearchActivity.this, PantryActivity.class);\r\n            finish();\r\n            startActivity(intent3);\r\n        } else if (itemId == R.id.nav_search) {\r\n            Intent intent4 = new Intent(ComplexSearchActivity.this, AdvancedSearchActivity.class);\r\n            finish();\r\n            startActivity(intent4);\r\n        } else if (itemId == R.id.nav_logout) {\r\n            FirebaseAuth.getInstance().signOut();\r\n            Intent intent5 = new Intent(ComplexSearchActivity.this, LoginActivity.class);\r\n            finish();\r\n            startActivity(intent5);\r\n        } else if (itemId == R.id.nav_community) {\r\n            Intent intent6 = new Intent(ComplexSearchActivity.this, CommunityActivity.class);\r\n            finish();\r\n            startActivity(intent6);\r\n        } else if (itemId == R.id.nav_complex_search) {\r\n            Intent intent7 = new Intent(ComplexSearchActivity.this, ComplexSearchActivity.class);\r\n            finish();\r\n            startActivity(intent7);\r\n        }\r\n        //        } else if (itemId = R.id.nav_shoppinglist) {\r\n//            Intent intent8 = new Intent(MainActivity.this, ShoppingListActivity.class);\r\n//            finish();\r\n//            startActivity(intent8);\r\n//        } else if (itemId = R.id.nav_locationfinder) {\r\n//            Intent intent9 = new Intent(MainActivity.this, LocationActivity.class);\r\n//            finish();\r\n//            startActivity(intent9);\r\n//        }\r\n        drawerLayout.closeDrawer(GravityCompat.START);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public void onPointerCaptureChanged(boolean hasCapture) {\r\n        super.onPointerCaptureChanged(hasCapture);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sg/edu/np/mad/pocketchef/ComplexSearchActivity.java b/app/src/main/java/sg/edu/np/mad/pocketchef/ComplexSearchActivity.java
--- a/app/src/main/java/sg/edu/np/mad/pocketchef/ComplexSearchActivity.java	(revision f0306bc1d16c2091ca75c7870a17e167f8a3c71e)
+++ b/app/src/main/java/sg/edu/np/mad/pocketchef/ComplexSearchActivity.java	(date 1722095455931)
@@ -614,16 +614,15 @@
             Intent intent7 = new Intent(ComplexSearchActivity.this, ComplexSearchActivity.class);
             finish();
             startActivity(intent7);
+        } else if (itemId == R.id.nav_shoppinglist) {
+            Intent intent8 = new Intent(ComplexSearchActivity.this, ShopCartActivity.class);
+            finish();
+            startActivity(intent8);
+        } else if (itemId == R.id.nav_locationfinder) {
+            Intent intent9 = new Intent(ComplexSearchActivity.this, LocationActivity.class);
+            finish();
+            startActivity(intent9);
         }
-        //        } else if (itemId = R.id.nav_shoppinglist) {
-//            Intent intent8 = new Intent(MainActivity.this, ShoppingListActivity.class);
-//            finish();
-//            startActivity(intent8);
-//        } else if (itemId = R.id.nav_locationfinder) {
-//            Intent intent9 = new Intent(MainActivity.this, LocationActivity.class);
-//            finish();
-//            startActivity(intent9);
-//        }
         drawerLayout.closeDrawer(GravityCompat.START);
         return true;
     }
Index: app/src/main/java/sg/edu/np/mad/pocketchef/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sg.edu.np.mad.pocketchef;\r\n\r\nimport android.Manifest;\r\nimport android.annotation.SuppressLint;\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.HandlerThread;\r\nimport android.util.Log;\r\nimport android.view.MenuItem;\r\nimport android.view.MotionEvent;\r\nimport android.view.VelocityTracker;\r\nimport android.view.View;\r\nimport android.view.ViewTreeObserver;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.activity.EdgeToEdge;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.ActionBarDrawerToggle;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.constraintlayout.motion.widget.MotionLayout;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.graphics.Insets;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.core.view.ViewCompat;\r\nimport androidx.core.view.WindowInsetsCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\n\r\nimport com.google.android.material.appbar.MaterialToolbar;\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.squareup.picasso.Picasso;\r\n\r\nimport java.util.List;\r\n\r\nimport sg.edu.np.mad.pocketchef.Adapters.PostCommentsAdapter;\r\nimport sg.edu.np.mad.pocketchef.Models.CategoryBean;\r\nimport sg.edu.np.mad.pocketchef.Models.Comment;\r\nimport sg.edu.np.mad.pocketchef.Models.Notification;\r\nimport sg.edu.np.mad.pocketchef.Models.Post;\r\n\r\npublic class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {\r\n    boolean isReady = false;\r\n    private MotionLayout motionLayout;\r\n    TextView usernameTv;\r\n    FirebaseAuth mAuth;\r\n    FirebaseUser mUser;\r\n    DatabaseReference postsRef, mUserRef;\r\n    private static final String TAG = \"MainMenu\";\r\n    private static final int PERMISSION_REQUEST_CODE = 100;\r\n    private static final String CHANNEL_ID = \"pocket_chef\";\r\n    private static final float SWIPE_THRESHOLD = 10; // pixels, reduce for higher sensitivity\r\n    private static final float SWIPE_VELOCITY_THRESHOLD = 50; // pixels/second, reduce for higher sensitivity\r\n\r\n    DrawerLayout drawerLayout;\r\n    NavigationView navigationView;\r\n    MaterialToolbar toolbar;\r\n\r\n    MenuItem nav_home, nav_recipes, nav_search, nav_logout, nav_profile, nav_favourites, nav_community, nav_pantry, nav_complex_search, nav_shopping_list, nav_locationfinder;\r\n    CardView cardView1, cardView2, cardView3, cardView4, cardView5, cardView6, cardView7, cardView8, cardView_popularPost, cardView_newestPost, cardView_newNotifications, cardView_myPosts;\r\n\r\n    // In-app notifications (Stage 2 - Enjia)\r\n    ImageView notificationButton;\r\n\r\n    // Dashboard statistics and posts (Stage 2 - Enjia)\r\n    TextView newNotifications, myPosts, popularPostTitle, newestPostTitle, popularUsername, newestUsername, textView_popularPost, textView_newestPost;\r\n    ImageView popularProfilePicture, newestProfilePicture;\r\n    CardView popularPostCV, newestPostCV;\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        View content = findViewById(android.R.id.content);\r\n        content.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {\r\n            @Override\r\n            public boolean onPreDraw() {\r\n                if (isReady) {\r\n                    content.getViewTreeObserver().removeOnPreDrawListener(this);\r\n                }\r\n                dismissSplashScreen();\r\n                return false;\r\n            }\r\n        });\r\n        super.onCreate(savedInstanceState);\r\n        EdgeToEdge.enable(this);\r\n        setContentView(R.layout.activity_main);\r\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main_activity), (v, insets) -> {\r\n            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());\r\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);\r\n            return insets;\r\n        });\r\n        //For username\r\n        mAuth = FirebaseAuth.getInstance();\r\n        mUser = mAuth.getCurrentUser();\r\n\r\n        // Initialize Firebase Database\r\n        mUserRef = FirebaseDatabase.getInstance().getReference(\"users\");\r\n        usernameTv = findViewById(R.id.textView_username);\r\n        postsRef = FirebaseDatabase.getInstance().getReference(\"posts\");\r\n\r\n        FindViews(); // Initialize views after setContentView()\r\n        loadProfile(); //Load username\r\n        setUpDashboard(); // Set up dashboard\r\n\r\n        // Set toolbar as action bar\r\n        setSupportActionBar(toolbar);\r\n\r\n        // Set up Notifications\r\n        notificationButton = findViewById(R.id.notification_button);\r\n        notificationActivity();\r\n\r\n        //Not sure if this is needed\r\n        //menu.findItem(R.id.nav_logout).setVisible(false);\r\n\r\n\r\n        // Set up navigation view\r\n        navigationView.bringToFront();\r\n        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawerLayout, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);\r\n        drawerLayout.addDrawerListener(toggle);\r\n        toggle.syncState();\r\n        navigationView.setNavigationItemSelectedListener(this);\r\n        navigationView.setCheckedItem(nav_home);\r\n\r\n\r\n        // Custom setOnTouchListener for swipe gestures (in-built Gesture Detector is not working)\r\n        motionLayout.setOnTouchListener(new View.OnTouchListener() {\r\n            private float startX;\r\n            private float startY;\r\n            private VelocityTracker velocityTracker;\r\n\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n                switch (event.getActionMasked()) {\r\n                    case MotionEvent.ACTION_DOWN:\r\n                        startX = event.getX();\r\n                        startY = event.getY();\r\n                        if (velocityTracker == null) {\r\n                            velocityTracker = VelocityTracker.obtain();\r\n                        } else {\r\n                            velocityTracker.clear();\r\n                        }\r\n                        velocityTracker.addMovement(event);\r\n                        break;\r\n\r\n                    case MotionEvent.ACTION_MOVE:\r\n                        velocityTracker.addMovement(event);\r\n                        break;\r\n\r\n                    case MotionEvent.ACTION_UP:\r\n                        float endX = event.getX();\r\n                        float endY = event.getY();\r\n                        float diffX = endX - startX;\r\n                        float diffY = endY - startY;\r\n                        velocityTracker.addMovement(event);\r\n                        velocityTracker.computeCurrentVelocity(1000);\r\n                        float velocityX = velocityTracker.getXVelocity();\r\n                        float velocityY = velocityTracker.getYVelocity();\r\n\r\n                        if (Math.abs(diffX) > SWIPE_THRESHOLD && Math.abs(velocityX) > SWIPE_VELOCITY_THRESHOLD) {\r\n                            if (diffX > 0) {\r\n                                // Right swipe\r\n                                motionLayout.transitionToEnd();\r\n                            } else {\r\n                                // Left swipe\r\n                                motionLayout.transitionToStart();\r\n                            }\r\n                        }\r\n                        velocityTracker.recycle();\r\n                        velocityTracker = null;\r\n                        break;\r\n\r\n                    case MotionEvent.ACTION_CANCEL:\r\n                        if (velocityTracker != null) {\r\n                            velocityTracker.recycle();\r\n                            velocityTracker = null;\r\n                        }\r\n                        break;\r\n                }\r\n                return true;\r\n            }\r\n        });\r\n\r\n        // Notifications Permission\r\n        createNotificationChannel();\r\n\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.POST_NOTIFICATIONS) != PackageManager.PERMISSION_GRANTED) {\r\n            // Request permission\r\n            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.POST_NOTIFICATIONS}, PERMISSION_REQUEST_CODE);\r\n        }\r\n    }\r\n\r\n\r\n    private void CreateDefaultFavorites(){\r\n        new Thread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                List<CategoryBean> list = FavoriteDatabase.getInstance(MainActivity.this).categoryDao().getAllCategories();\r\n                if(list==null||list.isEmpty()){\r\n                    CategoryBean categoryBean =new CategoryBean(App.user,\"Favorite\",\"Favorite\");\r\n                    FavoriteDatabase.getInstance(MainActivity.this).categoryDao().insertCategory(categoryBean);\r\n                }\r\n            }\r\n        }).start();\r\n}\r\n\r\n    //To get username\r\n    private void loadProfile() {\r\n        // Read data from Firebase Database\r\n        mUserRef.child(mUser.getUid()).addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                if (snapshot.exists()) {\r\n                    // Retrieve data safely\r\n                    String name = snapshot.child(\"name\").getValue(String.class);\r\n\r\n                    // Update UI if values are not null or empty\r\n                    if (name != null && !name.isEmpty()) {\r\n                        usernameTv.setText(name);\r\n                    } else {\r\n                        String username = snapshot.child(\"username\").getValue(String.class);\r\n                        usernameTv.setText(username);\r\n                    }\r\n                } else {\r\n                    Log.w(TAG, \"DataSnapshot does not exist\");\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                Log.e(TAG, \"DatabaseError: \" + error.getMessage());\r\n            }\r\n        });\r\n\r\n        // Card View On CLick Listener for RecipeActivity\r\n        cardView1.setOnClickListener(v -> {\r\n            Intent intent = new Intent(MainActivity.this, RecipeActivity.class);\r\n            startActivity(intent);\r\n        });\r\n        // Card View On Click Listener for AdvancedSearchActivity\r\n        cardView2.setOnClickListener(v -> {\r\n            Intent intent = new Intent(MainActivity.this, AdvancedSearchActivity.class);\r\n            startActivity(intent);\r\n        });\r\n\r\n        // Card View On Click Listener for Favourites\r\n        cardView3.setOnClickListener(v -> {\r\n            Intent intent = new Intent(MainActivity.this, CreateCategoryActivity.class);\r\n            startActivity(intent);\r\n        });\r\n\r\n        // Card View On Click Listener for ProfileActivity (changing this to shoppinglist)\r\n        cardView4.setOnClickListener(v -> {\r\n            Intent intent = new Intent(MainActivity.this, ProfileActivity.class);\r\n            startActivity(intent);\r\n        });\r\n\r\n        // Card View On Click Listener for ComplexSearch Activity\r\n        cardView5.setOnClickListener(v -> {\r\n            Intent intent = new Intent(MainActivity.this, ComplexSearchActivity.class);\r\n            startActivity(intent);\r\n        });\r\n\r\n        // Card View On Click Listener for Community Activity\r\n        cardView6.setOnClickListener(v -> {\r\n            Intent intent = new Intent(MainActivity.this, CommunityActivity.class);\r\n            startActivity(intent);\r\n        });\r\n\r\n        // Card View On Click Listener for Pantry Activity\r\n        cardView7.setOnClickListener(v -> {\r\n            Intent intent = new Intent(MainActivity.this, PantryActivity.class);\r\n            startActivity(intent);\r\n        });\r\n\r\n        // Card View On Click Listener for Shopping List Activity\r\n        cardView8.setOnClickListener(v -> {\r\n            Intent intent = new Intent(MainActivity.this, LocationActivity.class);\r\n            startActivity(intent);\r\n        });\r\n\r\n    }\r\n\r\n    // Stage 2 - Enjia\r\n    private void createNotificationChannel() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            CharSequence name = \"Pocket Chef\";\r\n            String description = \"Community Page Notifications\";\r\n            int importance = NotificationManager.IMPORTANCE_HIGH;\r\n            NotificationChannel channel = new NotificationChannel(CHANNEL_ID, name, importance);\r\n            channel.setDescription(description);\r\n\r\n            NotificationManager notificationManager = getSystemService(NotificationManager.class);\r\n            notificationManager.createNotificationChannel(channel);\r\n        }\r\n    }\r\n\r\n    // In-app notifications - check if got any notifications\r\n    public void notificationActivity(){\r\n        // Check if the user has any notifications and count the total of notifications the user has\r\n        mUserRef.child(mUser.getUid()).child(\"notifications\").addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                if (snapshot.exists()) {\r\n                    int totalNotifications = (int) snapshot.getChildrenCount(); // Count number of notifications and update the dashbaord\r\n                    Log.d(TAG, \"Notifications: \" + totalNotifications);\r\n                    newNotifications.setText(totalNotifications == 0 ? \"0\" : String.valueOf(totalNotifications));\r\n\r\n                    boolean hasNotifications = false;\r\n                    for (DataSnapshot dataSnapshot : snapshot.getChildren()) {\r\n                        Notification notification = dataSnapshot.getValue(Notification.class);\r\n                        if (notification != null) {\r\n                            // User has notifications so the button will change\r\n                            hasNotifications = true;\r\n                            notificationButton.setImageResource(R.drawable.baseline_notifications_active_24);\r\n                        }\r\n                    }\r\n                    if (hasNotifications) {\r\n                        Log.d(TAG, \"User has notifications.\");\r\n                    } else {\r\n                        Log.d(TAG, \"No notifications for user.\");\r\n                    }\r\n                } else {\r\n                    newNotifications.setText(\"0\"); // User has no notifications\r\n                    Log.d(TAG, \"No notifications found.\");\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                Log.e(TAG, \"DatabaseError: \" + error.getMessage());\r\n            }\r\n        });\r\n        notificationButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent intent = new Intent(MainActivity.this, NotificationsActivity.class);\r\n                finish();\r\n                startActivity(intent);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Setting up dashboard and posts (Stage 2 - Enjia)\r\n    public void setUpDashboard(){\r\n        // Get the total number of posts\r\n        postsRef.orderByChild(\"userId\").equalTo(mUser.getUid()).addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                int totalPosts = (int) snapshot.getChildrenCount();\r\n                Log.d(TAG, \"Total posts: \" + totalPosts);\r\n                myPosts.setText(totalPosts == 0 ? \"0\" : String.valueOf(totalPosts));\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                Log.w(TAG, \"loadPosts\", error.toException());\r\n            }\r\n        });\r\n\r\n        postsRef.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n\r\n                // Get the post with the most number of likes\r\n                Post mostLikedPost = null;\r\n                int maxLikes = Integer.MIN_VALUE;\r\n                for (DataSnapshot postSnapshot : snapshot.getChildren()) {\r\n                    Post post = postSnapshot.getValue(Post.class);\r\n                    post.setPostKey(postSnapshot.getKey());\r\n\r\n                    if (post != null) {\r\n                        int likes = post.getLikes();\r\n                        if (likes > maxLikes) {\r\n                            mostLikedPost = post;\r\n                            maxLikes = likes;\r\n                        }\r\n                    }\r\n                }\r\n                if (mostLikedPost != null) {\r\n                    Log.d(TAG, \"Most liked post: \" + mostLikedPost.getTitle());\r\n                    popularPostTitle.setText(mostLikedPost.getTitle());\r\n\r\n                    // Get the user name and profile picture of the user who posted the most liked post\r\n                    String userId = mostLikedPost.getUserId();\r\n                    getUserInfo(userId, popularUsername, popularProfilePicture);\r\n\r\n                    // Set up on click listener for the post\r\n                    Post finalMostLikedPost = mostLikedPost;\r\n                    Log.d(TAG, finalMostLikedPost.getPostKey());\r\n                    popularPostCV.setOnClickListener(new View.OnClickListener() {\r\n                        @Override\r\n                        public void onClick(View v) {\r\n                            // To see recipe details\r\n                            Intent postDetails = new Intent(MainActivity.this, PostDetailsActivity.class)\r\n                                    .putExtra(\"id\", finalMostLikedPost.getPostKey());\r\n                            startActivity(postDetails);\r\n                        }\r\n                    });\r\n                } else {\r\n                    Log.d(TAG, \"No posts found.\");\r\n                }\r\n\r\n                // Get the newest post\r\n                Post newestPost = null;\r\n                long newestTimestamp = Long.MIN_VALUE;\r\n                for (DataSnapshot postSnapshot : snapshot.getChildren()) {\r\n                    Post post = postSnapshot.getValue(Post.class);\r\n                    post.setPostKey(postSnapshot.getKey());\r\n\r\n                    if (post != null) {\r\n                        long timestamp = (long) post.getTimeStamp();\r\n                        if (timestamp > newestTimestamp) {\r\n                            newestPost = post;\r\n                            newestTimestamp = timestamp;\r\n                        }\r\n                    }\r\n                }\r\n                if (newestPost != null) {\r\n                    Log.d(TAG, \"Newest post: \" + newestPost.getTitle());\r\n                    newestPostTitle.setText(newestPost.getTitle());\r\n\r\n                    // Get the user name and profile picture of the user who posted the newest post\r\n                    String userId = newestPost.getUserId();\r\n                    getUserInfo(userId, newestUsername, newestProfilePicture);\r\n\r\n                    // Set up on click listener for the post\r\n                    Post finalNewestPost = newestPost;\r\n                    newestPostCV.setOnClickListener(new View.OnClickListener() {\r\n                        @Override\r\n                        public void onClick(View v) {\r\n                            Log.d(TAG, finalNewestPost.getPostKey());\r\n                            // To see recipe details\r\n                            Intent postDetails = new Intent(MainActivity.this, PostDetailsActivity.class)\r\n                                    .putExtra(\"id\", finalNewestPost.getPostKey());\r\n                            startActivity(postDetails);\r\n                        }\r\n                    });\r\n                } else {\r\n                    Log.d(TAG, \"No posts found.\");\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                Log.w(TAG, \"loadPosts\", error.toException());\r\n            }\r\n        });\r\n    }\r\n\r\n    private void getUserInfo(String userId, TextView usernameTextView, ImageView profilePictureImageView) {\r\n        mUserRef.child(userId).addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                if (snapshot.exists()) {\r\n                    String postUsername = snapshot.child(\"username\").getValue(String.class);\r\n                    String Image = snapshot.child(\"Image\").getValue(String.class);\r\n\r\n                    // Load profile picture\r\n                    if (Image != null && !Image.isEmpty()) {\r\n                        Picasso.get().load(Image).into(profilePictureImageView);\r\n                    } else {\r\n                        profilePictureImageView.setImageResource(R.drawable.pocketchef_logo);\r\n                    }\r\n\r\n                    // Update the username\r\n                    usernameTextView.setText(postUsername);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n                Log.w(TAG, \"getUserInfo:onCancelled\", error.toException());\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (drawerLayout.isDrawerOpen(GravityCompat.START)) {\r\n            drawerLayout.closeDrawer(GravityCompat.START);\r\n        } else {\r\n            super.onBackPressed();\r\n        }\r\n    }\r\n\r\n    private void FindViews() {\r\n        motionLayout = findViewById(R.id.main_activity);\r\n        drawerLayout = findViewById(R.id.drawer_layout);\r\n        navigationView = findViewById(R.id.nav_view);\r\n        toolbar = findViewById(R.id.toolbar);\r\n        nav_home = navigationView.getMenu().findItem(R.id.nav_home);\r\n        nav_recipes = navigationView.getMenu().findItem(R.id.nav_recipes);\r\n        nav_search = navigationView.getMenu().findItem(R.id.nav_search);\r\n        nav_logout = navigationView.getMenu().findItem(R.id.nav_logout);\r\n        nav_profile = navigationView.getMenu().findItem(R.id.nav_profile);\r\n        nav_favourites = navigationView.getMenu().findItem(R.id.nav_favourites);\r\n        nav_community = navigationView.getMenu().findItem(R.id.nav_community);\r\n        nav_pantry = navigationView.getMenu().findItem(R.id.nav_pantry);\r\n        nav_complex_search = navigationView.getMenu().findItem(R.id.nav_complex_search);\r\n        cardView1 = findViewById(R.id.cardView1);\r\n        cardView2 = findViewById(R.id.cardView2);\r\n        cardView3 = findViewById(R.id.cardView3);\r\n        cardView4 = findViewById(R.id.cardView4);\r\n        cardView5 = findViewById(R.id.cardView5);\r\n        cardView6 = findViewById(R.id.cardView6);\r\n        cardView7 = findViewById(R.id.cardView7);\r\n        cardView8 = findViewById(R.id.cardView8);\r\n        cardView_newestPost = findViewById(R.id.cardView_newestPost);\r\n        cardView_popularPost = findViewById(R.id.cardView_popularPost);\r\n        cardView_newNotifications = findViewById(R.id.cardView_newNotifications);\r\n        cardView_myPosts = findViewById(R.id.cardView_myPosts);\r\n        textView_newestPost = findViewById(R.id.textView_newestPost);\r\n        textView_popularPost = findViewById(R.id.textView_popularPost);\r\n\r\n        // Dashboard statistics and posts (Stage 2 - Enjia)\r\n        newNotifications = findViewById(R.id.textView_new_notifications);\r\n        myPosts = findViewById(R.id.textView_myPosts);\r\n        popularPostCV = findViewById(R.id.cardView_popularPost);\r\n        newestPostCV = findViewById(R.id.cardView_newestPost);\r\n        popularPostTitle = findViewById(R.id.textView_popularPostTitle);\r\n        newestPostTitle  = findViewById(R.id.textView_newestPostTitle);\r\n        newestUsername = findViewById(R.id.newest_username);\r\n        popularUsername = findViewById(R.id.popular_username);\r\n        newestProfilePicture = findViewById(R.id.newest_profile_picture);\r\n        popularProfilePicture = findViewById(R.id.popular_profile_picture);\r\n    }\r\n\r\n    private void dismissSplashScreen() {\r\n        HandlerThread handlerThread = new HandlerThread(\"HandlerThread\");\r\n        handlerThread.start();\r\n        Handler handler = new Handler(handlerThread.getLooper());\r\n        handler.postDelayed(() -> isReady = true, 3000);\r\n    }\r\n\r\n\r\n    @Override\r\n    public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {\r\n        int itemId = menuItem.getItemId();\r\n        if (itemId == R.id.nav_home) {\r\n            // Nothing Happens\r\n        } else if (itemId == R.id.nav_recipes) {\r\n            Intent intent = new Intent(MainActivity.this, RecipeActivity.class);\r\n            finish();\r\n            startActivity(intent);\r\n        } else if (itemId == R.id.nav_profile) {\r\n            Intent intent2 = new Intent(MainActivity.this, ProfileActivity.class);\r\n            finish();\r\n            startActivity(intent2);\r\n        } else if (itemId == R.id.nav_favourites) {\r\n            Intent intent3 = new Intent(MainActivity.this, CreateCategoryActivity.class);\r\n            finish();\r\n            startActivity(intent3);\r\n        } else if (itemId == R.id.nav_pantry) {\r\n            Intent intent3 = new Intent(MainActivity.this, PantryActivity.class);\r\n            finish();\r\n            startActivity(intent3);\r\n        } else if (itemId == R.id.nav_search) {\r\n            Intent intent4 = new Intent(MainActivity.this, AdvancedSearchActivity.class);\r\n            finish();\r\n            startActivity(intent4);\r\n        } else if (itemId == R.id.nav_logout) {\r\n            FirebaseAuth.getInstance().signOut();\r\n            Intent intent5 = new Intent(MainActivity.this, LoginActivity.class);\r\n            finish();\r\n            startActivity(intent5);\r\n        } else if (itemId == R.id.nav_community) {\r\n            Intent intent6 = new Intent(MainActivity.this, CommunityActivity.class);\r\n            finish();\r\n            startActivity(intent6);\r\n        } else if (itemId == R.id.nav_complex_search) {\r\n            Intent intent7 = new Intent(MainActivity.this, ComplexSearchActivity.class);\r\n            finish();\r\n            startActivity(intent7);\r\n        }\r\n//        } else if (itemId = R.id.nav_shoppinglist) {\r\n//            Intent intent8 = new Intent(MainActivity.this, ShoppingListActivity.class);\r\n//            finish();\r\n//            startActivity(intent8);\r\n//        } else if (itemId = R.id.nav_locationfinder) {\r\n//            Intent intent9 = new Intent(MainActivity.this, LocationActivity.class);\r\n//            finish();\r\n//            startActivity(intent9);\r\n//        }\r\n        drawerLayout.closeDrawer(GravityCompat.START);\r\n        return true;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sg/edu/np/mad/pocketchef/MainActivity.java b/app/src/main/java/sg/edu/np/mad/pocketchef/MainActivity.java
--- a/app/src/main/java/sg/edu/np/mad/pocketchef/MainActivity.java	(revision f0306bc1d16c2091ca75c7870a17e167f8a3c71e)
+++ b/app/src/main/java/sg/edu/np/mad/pocketchef/MainActivity.java	(date 1722095976303)
@@ -47,6 +47,7 @@
 import java.util.List;
 
 import sg.edu.np.mad.pocketchef.Adapters.PostCommentsAdapter;
+import sg.edu.np.mad.pocketchef.Models.App;
 import sg.edu.np.mad.pocketchef.Models.CategoryBean;
 import sg.edu.np.mad.pocketchef.Models.Comment;
 import sg.edu.np.mad.pocketchef.Models.Notification;
